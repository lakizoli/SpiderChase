#ifndef VULKAN_H_
#define VULKAN_H_ 1

#ifdef __cplusplus
extern "C" {
#endif

/*
** Copyright (c) 2015-2017 The Khronos Group Inc.
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/

/*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*/


#define VK_VERSION_1_0 1
#include "vk_platform.h"

#define VK_MAKE_VERSION(major, minor, patch) \
    (((major) << 22) | ((minor) << 12) | (patch))

// DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead.
//#define VK_API_VERSION VK_MAKE_VERSION(1, 0, 0) // Patch version should always be set to 0

// Vulkan 1.0 version number
#define VK_API_VERSION_1_0 VK_MAKE_VERSION(1, 0, 0)// Patch version should always be set to 0

#define VK_VERSION_MAJOR(version) ((uint32_t)(version) >> 22)
#define VK_VERSION_MINOR(version) (((uint32_t)(version) >> 12) & 0x3ff)
#define VK_VERSION_PATCH(version) ((uint32_t)(version) & 0xfff)
// Version of this file
#define VK_HEADER_VERSION 58


#define VK_NULL_HANDLE 0
        


#define VK_DEFINE_HANDLE(object) typedef struct object##_T* object;


#if !defined(VK_DEFINE_NON_DISPATCHABLE_HANDLE)
#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef struct object##_T *object;
#else
        #define VK_DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t object;
#endif
#endif
        


typedef uint32_t VkFlags;
typedef uint32_t VkBool32;
typedef uint64_t VkDeviceSize;
typedef uint32_t VkSampleMask;

VK_DEFINE_HANDLE(VkInstance)
VK_DEFINE_HANDLE(VkPhysicalDevice)
VK_DEFINE_HANDLE(VkDevice)
VK_DEFINE_HANDLE(VkQueue)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSemaphore)
VK_DEFINE_HANDLE(VkCommandBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFence)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDeviceMemory)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImage)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkEvent)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkQueryPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkBufferView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkImageView)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkShaderModule)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineCache)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipelineLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkRenderPass)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkPipeline)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSetLayout)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSampler)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorPool)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorSet)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkFramebuffer)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkCommandPool)

#define VK_LOD_CLAMP_NONE                 1000.0f
#define VK_REMAINING_MIP_LEVELS           (~0U)
#define VK_REMAINING_ARRAY_LAYERS         (~0U)
#define VK_WHOLE_SIZE                     (~0ULL)
#define VK_ATTACHMENT_UNUSED              (~0U)
#define VK_TRUE                           1
#define VK_FALSE                          0
#define VK_QUEUE_FAMILY_IGNORED           (~0U)
#define VK_SUBPASS_EXTERNAL               (~0U)
#define VK_MAX_PHYSICAL_DEVICE_NAME_SIZE  256
#define VK_UUID_SIZE                      16
#define VK_MAX_MEMORY_TYPES               32
#define VK_MAX_MEMORY_HEAPS               16
#define VK_MAX_EXTENSION_NAME_SIZE        256
#define VK_MAX_DESCRIPTION_SIZE           256


#define DEFINE_ENUM_BITWISE_OPERATORS(type_) \
}\
inline type_ operator | (type_ lhs, type_ rhs) \
{ \
    return (type_)((uint32_t)lhs | (uint32_t)rhs); \
} \
inline type_& operator |= (type_& lhs, type_ rhs) \
{ \
    return lhs = (type_)((uint32_t)lhs | (uint32_t)rhs); \
} \
inline type_ operator & (type_ lhs, type_ rhs) \
{ \
    return (type_)((uint32_t)(lhs) & (uint32_t)rhs); \
} \
inline type_& operator &= (type_& lhs, type_ rhs) \
{ \
    return lhs = (type_)((uint32_t)lhs & (uint32_t)rhs); \
} \
inline type_ operator ^ (type_ lhs, type_ rhs) \
{ \
    return (type_)((uint32_t)(lhs) ^ (uint32_t)rhs); \
} \
inline type_& operator ^= (type_& lhs, type_ rhs) \
{ \
    return lhs = (type_)((uint32_t)(lhs) ^ (uint32_t)rhs); \
} \
inline type_ operator <<(type_ lhs, uint32_t rhs) \
{ \
    return (type_)((uint32_t)(lhs) << rhs); \
} \
inline type_& operator <<=(type_& lhs, uint32_t rhs) \
{ \
    return lhs = (type_)((uint32_t)(lhs) << rhs); \
} \
inline type_ operator >>(type_ lhs, uint32_t rhs) \
{ \
    return (type_)((uint32_t)(lhs) >> rhs); \
} \
inline type_& operator >>=(type_& lhs, uint32_t rhs) \
{ \
    return lhs = (type_)((uint32_t)(lhs) >> rhs); \
} \
inline bool operator ==(type_ lhs, uint32_t rhs) \
{ \
    return (uint32_t)lhs == rhs; \
} \
inline bool operator !=(type_ lhs, uint32_t rhs) \
{ \
    return (uint32_t)lhs != rhs; \
} \
inline bool operator ==(uint32_t lhs, type_ rhs) \
{ \
    return lhs == (uint32_t)rhs; \
}\
inline bool operator !=(uint32_t lhs, type_ rhs) \
{ \
    return lhs != (uint32_t)rhs; \
}\
inline type_ operator ~(type_ lhs) \
{ \
    return (type_)(~(uint32_t)lhs); \
}\
inline int operator *(uint32_t lhs, type_ rhs) \
{ \
    return (lhs * (uint32_t)rhs); \
}\
inline type_ operator *(type_ lhs, uint32_t rhs) \
{ \
    return (type_)((uint32_t)lhs * rhs); \
}\
extern "C" {

typedef enum class VkPipelineCacheHeaderVersion {
    e_ONE = 1,
    e_BEGIN_RANGE = e_ONE,
    e_END_RANGE = e_ONE,
    e_RANGE_SIZE = (e_ONE - e_ONE + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCacheHeaderVersion;

typedef enum class VkResult {
    e_SUCCESS = 0,
    e_NOT_READY = 1,
    e_TIMEOUT = 2,
    e_EVENT_SET = 3,
    e_EVENT_RESET = 4,
    e_INCOMPLETE = 5,
    e_ERROR_OUT_OF_HOST_MEMORY = -1,
    e_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    e_ERROR_INITIALIZATION_FAILED = -3,
    e_ERROR_DEVICE_LOST = -4,
    e_ERROR_MEMORY_MAP_FAILED = -5,
    e_ERROR_LAYER_NOT_PRESENT = -6,
    e_ERROR_EXTENSION_NOT_PRESENT = -7,
    e_ERROR_FEATURE_NOT_PRESENT = -8,
    e_ERROR_INCOMPATIBLE_DRIVER = -9,
    e_ERROR_TOO_MANY_OBJECTS = -10,
    e_ERROR_FORMAT_NOT_SUPPORTED = -11,
    e_ERROR_FRAGMENTED_POOL = -12,
    e_ERROR_SURFACE_LOST_KHR = -1000000000,
    e_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    e_SUBOPTIMAL_KHR = 1000001003,
    e_ERROR_OUT_OF_DATE_KHR = -1000001004,
    e_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    e_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    e_ERROR_INVALID_SHADER_NV = -1000012000,
    e_ERROR_OUT_OF_POOL_MEMORY_KHR = -1000069000,
    e_ERROR_INVALID_EXTERNAL_HANDLE_KHR = -1000072003,
    e_BEGIN_RANGE = e_ERROR_FRAGMENTED_POOL,
    e_END_RANGE = e_INCOMPLETE,
    e_RANGE_SIZE = (e_INCOMPLETE - e_ERROR_FRAGMENTED_POOL + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkResult;

typedef enum class VkStructureType {
    e_APPLICATION_INFO = 0,
    e_INSTANCE_CREATE_INFO = 1,
    e_DEVICE_QUEUE_CREATE_INFO = 2,
    e_DEVICE_CREATE_INFO = 3,
    e_SUBMIT_INFO = 4,
    e_MEMORY_ALLOCATE_INFO = 5,
    e_MAPPED_MEMORY_RANGE = 6,
    e_BIND_SPARSE_INFO = 7,
    e_FENCE_CREATE_INFO = 8,
    e_SEMAPHORE_CREATE_INFO = 9,
    e_EVENT_CREATE_INFO = 10,
    e_QUERY_POOL_CREATE_INFO = 11,
    e_BUFFER_CREATE_INFO = 12,
    e_BUFFER_VIEW_CREATE_INFO = 13,
    e_IMAGE_CREATE_INFO = 14,
    e_IMAGE_VIEW_CREATE_INFO = 15,
    e_SHADER_MODULE_CREATE_INFO = 16,
    e_PIPELINE_CACHE_CREATE_INFO = 17,
    e_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    e_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    e_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    e_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    e_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    e_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    e_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    e_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    e_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    e_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    e_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    e_COMPUTE_PIPELINE_CREATE_INFO = 29,
    e_PIPELINE_LAYOUT_CREATE_INFO = 30,
    e_SAMPLER_CREATE_INFO = 31,
    e_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    e_DESCRIPTOR_POOL_CREATE_INFO = 33,
    e_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    e_WRITE_DESCRIPTOR_SET = 35,
    e_COPY_DESCRIPTOR_SET = 36,
    e_FRAMEBUFFER_CREATE_INFO = 37,
    e_RENDER_PASS_CREATE_INFO = 38,
    e_COMMAND_POOL_CREATE_INFO = 39,
    e_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    e_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    e_COMMAND_BUFFER_BEGIN_INFO = 42,
    e_RENDER_PASS_BEGIN_INFO = 43,
    e_BUFFER_MEMORY_BARRIER = 44,
    e_IMAGE_MEMORY_BARRIER = 45,
    e_MEMORY_BARRIER = 46,
    e_LOADER_INSTANCE_CREATE_INFO = 47,
    e_LOADER_DEVICE_CREATE_INFO = 48,
    e_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    e_PRESENT_INFO_KHR = 1000001001,
    e_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    e_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    e_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    e_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    e_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    e_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    e_MIR_SURFACE_CREATE_INFO_KHR = 1000007000,
    e_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    e_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    e_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    e_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    e_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    e_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    e_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    e_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    e_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    e_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    e_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    e_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHX = 1000053000,
    e_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHX = 1000053001,
    e_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHX = 1000053002,
    e_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    e_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    e_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    e_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    e_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    e_PHYSICAL_DEVICE_FEATURES_2_KHR = 1000059000,
    e_PHYSICAL_DEVICE_PROPERTIES_2_KHR = 1000059001,
    e_FORMAT_PROPERTIES_2_KHR = 1000059002,
    e_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059003,
    e_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = 1000059004,
    e_QUEUE_FAMILY_PROPERTIES_2_KHR = 1000059005,
    e_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = 1000059006,
    e_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = 1000059007,
    e_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = 1000059008,
    e_MEMORY_ALLOCATE_FLAGS_INFO_KHX = 1000060000,
    e_BIND_BUFFER_MEMORY_INFO_KHX = 1000060001,
    e_BIND_IMAGE_MEMORY_INFO_KHX = 1000060002,
    e_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHX = 1000060003,
    e_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHX = 1000060004,
    e_DEVICE_GROUP_SUBMIT_INFO_KHX = 1000060005,
    e_DEVICE_GROUP_BIND_SPARSE_INFO_KHX = 1000060006,
    e_DEVICE_GROUP_PRESENT_CAPABILITIES_KHX = 1000060007,
    e_IMAGE_SWAPCHAIN_CREATE_INFO_KHX = 1000060008,
    e_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHX = 1000060009,
    e_ACQUIRE_NEXT_IMAGE_INFO_KHX = 1000060010,
    e_DEVICE_GROUP_PRESENT_INFO_KHX = 1000060011,
    e_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHX = 1000060012,
    e_VALIDATION_FLAGS_EXT = 1000061000,
    e_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    e_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHX = 1000070000,
    e_DEVICE_GROUP_DEVICE_CREATE_INFO_KHX = 1000070001,
    e_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = 1000071000,
    e_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = 1000071001,
    e_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = 1000071002,
    e_EXTERNAL_BUFFER_PROPERTIES_KHR = 1000071003,
    e_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = 1000071004,
    e_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = 1000072000,
    e_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = 1000072001,
    e_EXPORT_MEMORY_ALLOCATE_INFO_KHR = 1000072002,
    e_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    e_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    e_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    e_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    e_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    e_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    e_MEMORY_GET_FD_INFO_KHR = 1000074002,
    e_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    e_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = 1000076000,
    e_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = 1000076001,
    e_EXPORT_SEMAPHORE_CREATE_INFO_KHR = 1000077000,
    e_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    e_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    e_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    e_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    e_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    e_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    e_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    e_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = 1000083000,
    e_PRESENT_REGIONS_KHR = 1000084000,
    e_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = 1000085000,
    e_OBJECT_TABLE_CREATE_INFO_NVX = 1000086000,
    e_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001,
    e_CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002,
    e_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003,
    e_DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004,
    e_DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005,
    e_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    e_SURFACE_CAPABILITIES2_EXT = 1000090000,
    e_DISPLAY_POWER_INFO_EXT = 1000091000,
    e_DEVICE_EVENT_INFO_EXT = 1000091001,
    e_DISPLAY_EVENT_INFO_EXT = 1000091002,
    e_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    e_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    e_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    e_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    e_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    e_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    e_HDR_METADATA_EXT = 1000105000,
    e_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    e_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = 1000112000,
    e_EXTERNAL_FENCE_PROPERTIES_KHR = 1000112001,
    e_EXPORT_FENCE_CREATE_INFO_KHR = 1000113000,
    e_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    e_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    e_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    e_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    e_FENCE_GET_FD_INFO_KHR = 1000115001,
    e_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    e_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    e_SURFACE_FORMAT_2_KHR = 1000119002,
    e_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = 1000120000,
    e_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    e_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    e_MEMORY_DEDICATED_REQUIREMENTS_KHR = 1000127000,
    e_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = 1000127001,
    e_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
    e_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
    e_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146000,
    e_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146001,
    e_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = 1000146002,
    e_MEMORY_REQUIREMENTS_2_KHR = 1000146003,
    e_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = 1000146004,
    e_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    e_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    e_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    e_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    e_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    e_BEGIN_RANGE = e_APPLICATION_INFO,
    e_END_RANGE = e_LOADER_DEVICE_CREATE_INFO,
    e_RANGE_SIZE = (e_LOADER_DEVICE_CREATE_INFO - e_APPLICATION_INFO + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkStructureType;

typedef enum class VkSystemAllocationScope {
    e_COMMAND = 0,
    e_OBJECT = 1,
    e_CACHE = 2,
    e_DEVICE = 3,
    e_INSTANCE = 4,
    e_BEGIN_RANGE = e_COMMAND,
    e_END_RANGE = e_INSTANCE,
    e_RANGE_SIZE = (e_INSTANCE - e_COMMAND + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkSystemAllocationScope;

typedef enum class VkInternalAllocationType {
    e_EXECUTABLE = 0,
    e_BEGIN_RANGE = e_EXECUTABLE,
    e_END_RANGE = e_EXECUTABLE,
    e_RANGE_SIZE = (e_EXECUTABLE - e_EXECUTABLE + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkInternalAllocationType;

typedef enum class VkFormat {
    e_UNDEFINED = 0,
    e_R4G4_UNORM_PACK8 = 1,
    e_R4G4B4A4_UNORM_PACK16 = 2,
    e_B4G4R4A4_UNORM_PACK16 = 3,
    e_R5G6B5_UNORM_PACK16 = 4,
    e_B5G6R5_UNORM_PACK16 = 5,
    e_R5G5B5A1_UNORM_PACK16 = 6,
    e_B5G5R5A1_UNORM_PACK16 = 7,
    e_A1R5G5B5_UNORM_PACK16 = 8,
    e_R8_UNORM = 9,
    e_R8_SNORM = 10,
    e_R8_USCALED = 11,
    e_R8_SSCALED = 12,
    e_R8_UINT = 13,
    e_R8_SINT = 14,
    e_R8_SRGB = 15,
    e_R8G8_UNORM = 16,
    e_R8G8_SNORM = 17,
    e_R8G8_USCALED = 18,
    e_R8G8_SSCALED = 19,
    e_R8G8_UINT = 20,
    e_R8G8_SINT = 21,
    e_R8G8_SRGB = 22,
    e_R8G8B8_UNORM = 23,
    e_R8G8B8_SNORM = 24,
    e_R8G8B8_USCALED = 25,
    e_R8G8B8_SSCALED = 26,
    e_R8G8B8_UINT = 27,
    e_R8G8B8_SINT = 28,
    e_R8G8B8_SRGB = 29,
    e_B8G8R8_UNORM = 30,
    e_B8G8R8_SNORM = 31,
    e_B8G8R8_USCALED = 32,
    e_B8G8R8_SSCALED = 33,
    e_B8G8R8_UINT = 34,
    e_B8G8R8_SINT = 35,
    e_B8G8R8_SRGB = 36,
    e_R8G8B8A8_UNORM = 37,
    e_R8G8B8A8_SNORM = 38,
    e_R8G8B8A8_USCALED = 39,
    e_R8G8B8A8_SSCALED = 40,
    e_R8G8B8A8_UINT = 41,
    e_R8G8B8A8_SINT = 42,
    e_R8G8B8A8_SRGB = 43,
    e_B8G8R8A8_UNORM = 44,
    e_B8G8R8A8_SNORM = 45,
    e_B8G8R8A8_USCALED = 46,
    e_B8G8R8A8_SSCALED = 47,
    e_B8G8R8A8_UINT = 48,
    e_B8G8R8A8_SINT = 49,
    e_B8G8R8A8_SRGB = 50,
    e_A8B8G8R8_UNORM_PACK32 = 51,
    e_A8B8G8R8_SNORM_PACK32 = 52,
    e_A8B8G8R8_USCALED_PACK32 = 53,
    e_A8B8G8R8_SSCALED_PACK32 = 54,
    e_A8B8G8R8_UINT_PACK32 = 55,
    e_A8B8G8R8_SINT_PACK32 = 56,
    e_A8B8G8R8_SRGB_PACK32 = 57,
    e_A2R10G10B10_UNORM_PACK32 = 58,
    e_A2R10G10B10_SNORM_PACK32 = 59,
    e_A2R10G10B10_USCALED_PACK32 = 60,
    e_A2R10G10B10_SSCALED_PACK32 = 61,
    e_A2R10G10B10_UINT_PACK32 = 62,
    e_A2R10G10B10_SINT_PACK32 = 63,
    e_A2B10G10R10_UNORM_PACK32 = 64,
    e_A2B10G10R10_SNORM_PACK32 = 65,
    e_A2B10G10R10_USCALED_PACK32 = 66,
    e_A2B10G10R10_SSCALED_PACK32 = 67,
    e_A2B10G10R10_UINT_PACK32 = 68,
    e_A2B10G10R10_SINT_PACK32 = 69,
    e_R16_UNORM = 70,
    e_R16_SNORM = 71,
    e_R16_USCALED = 72,
    e_R16_SSCALED = 73,
    e_R16_UINT = 74,
    e_R16_SINT = 75,
    e_R16_SFLOAT = 76,
    e_R16G16_UNORM = 77,
    e_R16G16_SNORM = 78,
    e_R16G16_USCALED = 79,
    e_R16G16_SSCALED = 80,
    e_R16G16_UINT = 81,
    e_R16G16_SINT = 82,
    e_R16G16_SFLOAT = 83,
    e_R16G16B16_UNORM = 84,
    e_R16G16B16_SNORM = 85,
    e_R16G16B16_USCALED = 86,
    e_R16G16B16_SSCALED = 87,
    e_R16G16B16_UINT = 88,
    e_R16G16B16_SINT = 89,
    e_R16G16B16_SFLOAT = 90,
    e_R16G16B16A16_UNORM = 91,
    e_R16G16B16A16_SNORM = 92,
    e_R16G16B16A16_USCALED = 93,
    e_R16G16B16A16_SSCALED = 94,
    e_R16G16B16A16_UINT = 95,
    e_R16G16B16A16_SINT = 96,
    e_R16G16B16A16_SFLOAT = 97,
    e_R32_UINT = 98,
    e_R32_SINT = 99,
    e_R32_SFLOAT = 100,
    e_R32G32_UINT = 101,
    e_R32G32_SINT = 102,
    e_R32G32_SFLOAT = 103,
    e_R32G32B32_UINT = 104,
    e_R32G32B32_SINT = 105,
    e_R32G32B32_SFLOAT = 106,
    e_R32G32B32A32_UINT = 107,
    e_R32G32B32A32_SINT = 108,
    e_R32G32B32A32_SFLOAT = 109,
    e_R64_UINT = 110,
    e_R64_SINT = 111,
    e_R64_SFLOAT = 112,
    e_R64G64_UINT = 113,
    e_R64G64_SINT = 114,
    e_R64G64_SFLOAT = 115,
    e_R64G64B64_UINT = 116,
    e_R64G64B64_SINT = 117,
    e_R64G64B64_SFLOAT = 118,
    e_R64G64B64A64_UINT = 119,
    e_R64G64B64A64_SINT = 120,
    e_R64G64B64A64_SFLOAT = 121,
    e_B10G11R11_UFLOAT_PACK32 = 122,
    e_E5B9G9R9_UFLOAT_PACK32 = 123,
    e_D16_UNORM = 124,
    e_X8_D24_UNORM_PACK32 = 125,
    e_D32_SFLOAT = 126,
    e_S8_UINT = 127,
    e_D16_UNORM_S8_UINT = 128,
    e_D24_UNORM_S8_UINT = 129,
    e_D32_SFLOAT_S8_UINT = 130,
    e_BC1_RGB_UNORM_BLOCK = 131,
    e_BC1_RGB_SRGB_BLOCK = 132,
    e_BC1_RGBA_UNORM_BLOCK = 133,
    e_BC1_RGBA_SRGB_BLOCK = 134,
    e_BC2_UNORM_BLOCK = 135,
    e_BC2_SRGB_BLOCK = 136,
    e_BC3_UNORM_BLOCK = 137,
    e_BC3_SRGB_BLOCK = 138,
    e_BC4_UNORM_BLOCK = 139,
    e_BC4_SNORM_BLOCK = 140,
    e_BC5_UNORM_BLOCK = 141,
    e_BC5_SNORM_BLOCK = 142,
    e_BC6H_UFLOAT_BLOCK = 143,
    e_BC6H_SFLOAT_BLOCK = 144,
    e_BC7_UNORM_BLOCK = 145,
    e_BC7_SRGB_BLOCK = 146,
    e_ETC2_R8G8B8_UNORM_BLOCK = 147,
    e_ETC2_R8G8B8_SRGB_BLOCK = 148,
    e_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    e_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    e_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    e_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    e_EAC_R11_UNORM_BLOCK = 153,
    e_EAC_R11_SNORM_BLOCK = 154,
    e_EAC_R11G11_UNORM_BLOCK = 155,
    e_EAC_R11G11_SNORM_BLOCK = 156,
    e_ASTC_4x4_UNORM_BLOCK = 157,
    e_ASTC_4x4_SRGB_BLOCK = 158,
    e_ASTC_5x4_UNORM_BLOCK = 159,
    e_ASTC_5x4_SRGB_BLOCK = 160,
    e_ASTC_5x5_UNORM_BLOCK = 161,
    e_ASTC_5x5_SRGB_BLOCK = 162,
    e_ASTC_6x5_UNORM_BLOCK = 163,
    e_ASTC_6x5_SRGB_BLOCK = 164,
    e_ASTC_6x6_UNORM_BLOCK = 165,
    e_ASTC_6x6_SRGB_BLOCK = 166,
    e_ASTC_8x5_UNORM_BLOCK = 167,
    e_ASTC_8x5_SRGB_BLOCK = 168,
    e_ASTC_8x6_UNORM_BLOCK = 169,
    e_ASTC_8x6_SRGB_BLOCK = 170,
    e_ASTC_8x8_UNORM_BLOCK = 171,
    e_ASTC_8x8_SRGB_BLOCK = 172,
    e_ASTC_10x5_UNORM_BLOCK = 173,
    e_ASTC_10x5_SRGB_BLOCK = 174,
    e_ASTC_10x6_UNORM_BLOCK = 175,
    e_ASTC_10x6_SRGB_BLOCK = 176,
    e_ASTC_10x8_UNORM_BLOCK = 177,
    e_ASTC_10x8_SRGB_BLOCK = 178,
    e_ASTC_10x10_UNORM_BLOCK = 179,
    e_ASTC_10x10_SRGB_BLOCK = 180,
    e_ASTC_12x10_UNORM_BLOCK = 181,
    e_ASTC_12x10_SRGB_BLOCK = 182,
    e_ASTC_12x12_UNORM_BLOCK = 183,
    e_ASTC_12x12_SRGB_BLOCK = 184,
    e_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    e_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    e_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    e_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    e_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    e_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    e_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    e_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    e_BEGIN_RANGE = e_UNDEFINED,
    e_END_RANGE = e_ASTC_12x12_SRGB_BLOCK,
    e_RANGE_SIZE = (e_ASTC_12x12_SRGB_BLOCK - e_UNDEFINED + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkFormat;

typedef enum class VkImageType {
    e_1D = 0,
    e_2D = 1,
    e_3D = 2,
    e_BEGIN_RANGE = e_1D,
    e_END_RANGE = e_3D,
    e_RANGE_SIZE = (e_3D - e_1D + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkImageType;

typedef enum class VkImageTiling {
    e_OPTIMAL = 0,
    e_LINEAR = 1,
    e_BEGIN_RANGE = e_OPTIMAL,
    e_END_RANGE = e_LINEAR,
    e_RANGE_SIZE = (e_LINEAR - e_OPTIMAL + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkImageTiling;

typedef enum class VkPhysicalDeviceType {
    e_OTHER = 0,
    e_INTEGRATED_GPU = 1,
    e_DISCRETE_GPU = 2,
    e_VIRTUAL_GPU = 3,
    e_CPU = 4,
    e_BEGIN_RANGE = e_OTHER,
    e_END_RANGE = e_CPU,
    e_RANGE_SIZE = (e_CPU - e_OTHER + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkPhysicalDeviceType;

typedef enum class VkQueryType {
    e_OCCLUSION = 0,
    e_PIPELINE_STATISTICS = 1,
    e_TIMESTAMP = 2,
    e_BEGIN_RANGE = e_OCCLUSION,
    e_END_RANGE = e_TIMESTAMP,
    e_RANGE_SIZE = (e_TIMESTAMP - e_OCCLUSION + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkQueryType;

typedef enum class VkSharingMode {
    e_EXCLUSIVE = 0,
    e_CONCURRENT = 1,
    e_BEGIN_RANGE = e_EXCLUSIVE,
    e_END_RANGE = e_CONCURRENT,
    e_RANGE_SIZE = (e_CONCURRENT - e_EXCLUSIVE + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkSharingMode;

typedef enum class VkImageLayout {
    e_UNDEFINED = 0,
    e_GENERAL = 1,
    e_COLOR_ATTACHMENT_OPTIMAL = 2,
    e_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    e_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    e_SHADER_READ_ONLY_OPTIMAL = 5,
    e_TRANSFER_SRC_OPTIMAL = 6,
    e_TRANSFER_DST_OPTIMAL = 7,
    e_PREINITIALIZED = 8,
    e_PRESENT_SRC_KHR = 1000001002,
    e_SHARED_PRESENT_KHR = 1000111000,
    e_BEGIN_RANGE = e_UNDEFINED,
    e_END_RANGE = e_PREINITIALIZED,
    e_RANGE_SIZE = (e_PREINITIALIZED - e_UNDEFINED + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkImageLayout;

typedef enum class VkImageViewType {
    e_1D = 0,
    e_2D = 1,
    e_3D = 2,
    e_CUBE = 3,
    e_1D_ARRAY = 4,
    e_2D_ARRAY = 5,
    e_CUBE_ARRAY = 6,
    e_BEGIN_RANGE = e_1D,
    e_END_RANGE = e_CUBE_ARRAY,
    e_RANGE_SIZE = (e_CUBE_ARRAY - e_1D + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkImageViewType;

typedef enum class VkComponentSwizzle {
    e_IDENTITY = 0,
    e_ZERO = 1,
    e_ONE = 2,
    e_R = 3,
    e_G = 4,
    e_B = 5,
    e_A = 6,
    e_BEGIN_RANGE = e_IDENTITY,
    e_END_RANGE = e_A,
    e_RANGE_SIZE = (e_A - e_IDENTITY + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkComponentSwizzle;

typedef enum class VkVertexInputRate {
    e_VERTEX = 0,
    e_INSTANCE = 1,
    e_BEGIN_RANGE = e_VERTEX,
    e_END_RANGE = e_INSTANCE,
    e_RANGE_SIZE = (e_INSTANCE - e_VERTEX + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkVertexInputRate;

typedef enum class VkPrimitiveTopology {
    e_POINT_LIST = 0,
    e_LINE_LIST = 1,
    e_LINE_STRIP = 2,
    e_TRIANGLE_LIST = 3,
    e_TRIANGLE_STRIP = 4,
    e_TRIANGLE_FAN = 5,
    e_LINE_LIST_WITH_ADJACENCY = 6,
    e_LINE_STRIP_WITH_ADJACENCY = 7,
    e_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    e_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    e_PATCH_LIST = 10,
    e_BEGIN_RANGE = e_POINT_LIST,
    e_END_RANGE = e_PATCH_LIST,
    e_RANGE_SIZE = (e_PATCH_LIST - e_POINT_LIST + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkPrimitiveTopology;

typedef enum class VkPolygonMode {
    e_FILL = 0,
    e_LINE = 1,
    e_POINT = 2,
    e_FILL_RECTANGLE_NV = 1000153000,
    e_BEGIN_RANGE = e_FILL,
    e_END_RANGE = e_POINT,
    e_RANGE_SIZE = (e_POINT - e_FILL + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkPolygonMode;

typedef enum class VkFrontFace {
    e_COUNTER_CLOCKWISE = 0,
    e_CLOCKWISE = 1,
    e_BEGIN_RANGE = e_COUNTER_CLOCKWISE,
    e_END_RANGE = e_CLOCKWISE,
    e_RANGE_SIZE = (e_CLOCKWISE - e_COUNTER_CLOCKWISE + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkFrontFace;

typedef enum class VkCompareOp {
    e_NEVER = 0,
    e_LESS = 1,
    e_EQUAL = 2,
    e_LESS_OR_EQUAL = 3,
    e_GREATER = 4,
    e_NOT_EQUAL = 5,
    e_GREATER_OR_EQUAL = 6,
    e_ALWAYS = 7,
    e_BEGIN_RANGE = e_NEVER,
    e_END_RANGE = e_ALWAYS,
    e_RANGE_SIZE = (e_ALWAYS - e_NEVER + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkCompareOp;

typedef enum class VkStencilOp {
    e_KEEP = 0,
    e_ZERO = 1,
    e_REPLACE = 2,
    e_INCREMENT_AND_CLAMP = 3,
    e_DECREMENT_AND_CLAMP = 4,
    e_INVERT = 5,
    e_INCREMENT_AND_WRAP = 6,
    e_DECREMENT_AND_WRAP = 7,
    e_BEGIN_RANGE = e_KEEP,
    e_END_RANGE = e_DECREMENT_AND_WRAP,
    e_RANGE_SIZE = (e_DECREMENT_AND_WRAP - e_KEEP + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkStencilOp;

typedef enum class VkLogicOp {
    e_CLEAR = 0,
    e_AND = 1,
    e_AND_REVERSE = 2,
    e_COPY = 3,
    e_AND_INVERTED = 4,
    e_NO_OP = 5,
    e_XOR = 6,
    e_OR = 7,
    e_NOR = 8,
    e_EQUIVALENT = 9,
    e_INVERT = 10,
    e_OR_REVERSE = 11,
    e_COPY_INVERTED = 12,
    e_OR_INVERTED = 13,
    e_NAND = 14,
    e_SET = 15,
    e_BEGIN_RANGE = e_CLEAR,
    e_END_RANGE = e_SET,
    e_RANGE_SIZE = (e_SET - e_CLEAR + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkLogicOp;

typedef enum class VkBlendFactor {
    e_ZERO = 0,
    e_ONE = 1,
    e_SRC_COLOR = 2,
    e_ONE_MINUS_SRC_COLOR = 3,
    e_DST_COLOR = 4,
    e_ONE_MINUS_DST_COLOR = 5,
    e_SRC_ALPHA = 6,
    e_ONE_MINUS_SRC_ALPHA = 7,
    e_DST_ALPHA = 8,
    e_ONE_MINUS_DST_ALPHA = 9,
    e_CONSTANT_COLOR = 10,
    e_ONE_MINUS_CONSTANT_COLOR = 11,
    e_CONSTANT_ALPHA = 12,
    e_ONE_MINUS_CONSTANT_ALPHA = 13,
    e_SRC_ALPHA_SATURATE = 14,
    e_SRC1_COLOR = 15,
    e_ONE_MINUS_SRC1_COLOR = 16,
    e_SRC1_ALPHA = 17,
    e_ONE_MINUS_SRC1_ALPHA = 18,
    e_BEGIN_RANGE = e_ZERO,
    e_END_RANGE = e_ONE_MINUS_SRC1_ALPHA,
    e_RANGE_SIZE = (e_ONE_MINUS_SRC1_ALPHA - e_ZERO + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkBlendFactor;

typedef enum class VkBlendOp {
    e_ADD = 0,
    e_SUBTRACT = 1,
    e_REVERSE_SUBTRACT = 2,
    e_MIN = 3,
    e_MAX = 4,
    e_ZERO_EXT = 1000148000,
    e_SRC_EXT = 1000148001,
    e_DST_EXT = 1000148002,
    e_SRC_OVER_EXT = 1000148003,
    e_DST_OVER_EXT = 1000148004,
    e_SRC_IN_EXT = 1000148005,
    e_DST_IN_EXT = 1000148006,
    e_SRC_OUT_EXT = 1000148007,
    e_DST_OUT_EXT = 1000148008,
    e_SRC_ATOP_EXT = 1000148009,
    e_DST_ATOP_EXT = 1000148010,
    e_XOR_EXT = 1000148011,
    e_MULTIPLY_EXT = 1000148012,
    e_SCREEN_EXT = 1000148013,
    e_OVERLAY_EXT = 1000148014,
    e_DARKEN_EXT = 1000148015,
    e_LIGHTEN_EXT = 1000148016,
    e_COLORDODGE_EXT = 1000148017,
    e_COLORBURN_EXT = 1000148018,
    e_HARDLIGHT_EXT = 1000148019,
    e_SOFTLIGHT_EXT = 1000148020,
    e_DIFFERENCE_EXT = 1000148021,
    e_EXCLUSION_EXT = 1000148022,
    e_INVERT_EXT = 1000148023,
    e_INVERT_RGB_EXT = 1000148024,
    e_LINEARDODGE_EXT = 1000148025,
    e_LINEARBURN_EXT = 1000148026,
    e_VIVIDLIGHT_EXT = 1000148027,
    e_LINEARLIGHT_EXT = 1000148028,
    e_PINLIGHT_EXT = 1000148029,
    e_HARDMIX_EXT = 1000148030,
    e_HSL_HUE_EXT = 1000148031,
    e_HSL_SATURATION_EXT = 1000148032,
    e_HSL_COLOR_EXT = 1000148033,
    e_HSL_LUMINOSITY_EXT = 1000148034,
    e_PLUS_EXT = 1000148035,
    e_PLUS_CLAMPED_EXT = 1000148036,
    e_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    e_PLUS_DARKER_EXT = 1000148038,
    e_MINUS_EXT = 1000148039,
    e_MINUS_CLAMPED_EXT = 1000148040,
    e_CONTRAST_EXT = 1000148041,
    e_INVERT_OVG_EXT = 1000148042,
    e_RED_EXT = 1000148043,
    e_GREEN_EXT = 1000148044,
    e_BLUE_EXT = 1000148045,
    e_BEGIN_RANGE = e_ADD,
    e_END_RANGE = e_MAX,
    e_RANGE_SIZE = (e_MAX - e_ADD + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkBlendOp;

typedef enum class VkDynamicState {
    e_VIEWPORT = 0,
    e_SCISSOR = 1,
    e_LINE_WIDTH = 2,
    e_DEPTH_BIAS = 3,
    e_BLEND_CONSTANTS = 4,
    e_DEPTH_BOUNDS = 5,
    e_STENCIL_COMPARE_MASK = 6,
    e_STENCIL_WRITE_MASK = 7,
    e_STENCIL_REFERENCE = 8,
    e_VIEWPORT_W_SCALING_NV = 1000087000,
    e_DISCARD_RECTANGLE_EXT = 1000099000,
    e_BEGIN_RANGE = e_VIEWPORT,
    e_END_RANGE = e_STENCIL_REFERENCE,
    e_RANGE_SIZE = (e_STENCIL_REFERENCE - e_VIEWPORT + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkDynamicState;

typedef enum class VkFilter {
    e_NEAREST = 0,
    e_LINEAR = 1,
    e_CUBIC_IMG = 1000015000,
    e_BEGIN_RANGE = e_NEAREST,
    e_END_RANGE = e_LINEAR,
    e_RANGE_SIZE = (e_LINEAR - e_NEAREST + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkFilter;

typedef enum class VkSamplerMipmapMode {
    e_NEAREST = 0,
    e_LINEAR = 1,
    e_BEGIN_RANGE = e_NEAREST,
    e_END_RANGE = e_LINEAR,
    e_RANGE_SIZE = (e_LINEAR - e_NEAREST + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkSamplerMipmapMode;

typedef enum class VkSamplerAddressMode {
    e_REPEAT = 0,
    e_MIRRORED_REPEAT = 1,
    e_CLAMP_TO_EDGE = 2,
    e_CLAMP_TO_BORDER = 3,
    e_MIRROR_CLAMP_TO_EDGE = 4,
    e_BEGIN_RANGE = e_REPEAT,
    e_END_RANGE = e_CLAMP_TO_BORDER,
    e_RANGE_SIZE = (e_CLAMP_TO_BORDER - e_REPEAT + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkSamplerAddressMode;

typedef enum class VkBorderColor {
    e_FLOAT_TRANSPARENT_BLACK = 0,
    e_INT_TRANSPARENT_BLACK = 1,
    e_FLOAT_OPAQUE_BLACK = 2,
    e_INT_OPAQUE_BLACK = 3,
    e_FLOAT_OPAQUE_WHITE = 4,
    e_INT_OPAQUE_WHITE = 5,
    e_BEGIN_RANGE = e_FLOAT_TRANSPARENT_BLACK,
    e_END_RANGE = e_INT_OPAQUE_WHITE,
    e_RANGE_SIZE = (e_INT_OPAQUE_WHITE - e_FLOAT_TRANSPARENT_BLACK + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkBorderColor;

typedef enum class VkDescriptorType {
    e_SAMPLER = 0,
    e_COMBINED_IMAGE_SAMPLER = 1,
    e_SAMPLED_IMAGE = 2,
    e_STORAGE_IMAGE = 3,
    e_UNIFORM_TEXEL_BUFFER = 4,
    e_STORAGE_TEXEL_BUFFER = 5,
    e_UNIFORM_BUFFER = 6,
    e_STORAGE_BUFFER = 7,
    e_UNIFORM_BUFFER_DYNAMIC = 8,
    e_STORAGE_BUFFER_DYNAMIC = 9,
    e_INPUT_ATTACHMENT = 10,
    e_BEGIN_RANGE = e_SAMPLER,
    e_END_RANGE = e_INPUT_ATTACHMENT,
    e_RANGE_SIZE = (e_INPUT_ATTACHMENT - e_SAMPLER + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorType;

typedef enum class VkAttachmentLoadOp {
    e_LOAD = 0,
    e_CLEAR = 1,
    e_DONT_CARE = 2,
    e_BEGIN_RANGE = e_LOAD,
    e_END_RANGE = e_DONT_CARE,
    e_RANGE_SIZE = (e_DONT_CARE - e_LOAD + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentLoadOp;

typedef enum class VkAttachmentStoreOp {
    e_STORE = 0,
    e_DONT_CARE = 1,
    e_BEGIN_RANGE = e_STORE,
    e_END_RANGE = e_DONT_CARE,
    e_RANGE_SIZE = (e_DONT_CARE - e_STORE + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentStoreOp;

typedef enum class VkPipelineBindPoint {
    e_GRAPHICS = 0,
    e_COMPUTE = 1,
    e_BEGIN_RANGE = e_GRAPHICS,
    e_END_RANGE = e_COMPUTE,
    e_RANGE_SIZE = (e_COMPUTE - e_GRAPHICS + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkPipelineBindPoint;

typedef enum class VkCommandBufferLevel {
    e_PRIMARY = 0,
    e_SECONDARY = 1,
    e_BEGIN_RANGE = e_PRIMARY,
    e_END_RANGE = e_SECONDARY,
    e_RANGE_SIZE = (e_SECONDARY - e_PRIMARY + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferLevel;

typedef enum class VkIndexType {
    e_UINT16 = 0,
    e_UINT32 = 1,
    e_BEGIN_RANGE = e_UINT16,
    e_END_RANGE = e_UINT32,
    e_RANGE_SIZE = (e_UINT32 - e_UINT16 + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkIndexType;

typedef enum class VkSubpassContents {
    e_INLINE = 0,
    e_SECONDARY_COMMAND_BUFFERS = 1,
    e_BEGIN_RANGE = e_INLINE,
    e_END_RANGE = e_SECONDARY_COMMAND_BUFFERS,
    e_RANGE_SIZE = (e_SECONDARY_COMMAND_BUFFERS - e_INLINE + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkSubpassContents;

typedef enum class VkObjectType {
    e_UNKNOWN = 0,
    e_INSTANCE = 1,
    e_PHYSICAL_DEVICE = 2,
    e_DEVICE = 3,
    e_QUEUE = 4,
    e_SEMAPHORE = 5,
    e_COMMAND_BUFFER = 6,
    e_FENCE = 7,
    e_DEVICE_MEMORY = 8,
    e_BUFFER = 9,
    e_IMAGE = 10,
    e_EVENT = 11,
    e_QUERY_POOL = 12,
    e_BUFFER_VIEW = 13,
    e_IMAGE_VIEW = 14,
    e_SHADER_MODULE = 15,
    e_PIPELINE_CACHE = 16,
    e_PIPELINE_LAYOUT = 17,
    e_RENDER_PASS = 18,
    e_PIPELINE = 19,
    e_DESCRIPTOR_SET_LAYOUT = 20,
    e_SAMPLER = 21,
    e_DESCRIPTOR_POOL = 22,
    e_DESCRIPTOR_SET = 23,
    e_FRAMEBUFFER = 24,
    e_COMMAND_POOL = 25,
    e_SURFACE_KHR = 1000000000,
    e_SWAPCHAIN_KHR = 1000001000,
    e_DISPLAY_KHR = 1000002000,
    e_DISPLAY_MODE_KHR = 1000002001,
    e_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    e_DESCRIPTOR_UPDATE_TEMPLATE_KHR = 1000085000,
    e_OBJECT_TABLE_NVX = 1000086000,
    e_INDIRECT_COMMANDS_LAYOUT_NVX = 1000086001,
    e_BEGIN_RANGE = e_UNKNOWN,
    e_END_RANGE = e_COMMAND_POOL,
    e_RANGE_SIZE = (e_COMMAND_POOL - e_UNKNOWN + 1),
    e_MAX_ENUM = 0x7FFFFFFF
} VkObjectType;

typedef VkFlags VkInstanceCreateFlags;

typedef enum class VkFormatFeatureFlags {
    e_SAMPLED_IMAGE_BIT = 0x00000001,
    e_STORAGE_IMAGE_BIT = 0x00000002,
    e_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
    e_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
    e_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
    e_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
    e_VERTEX_BUFFER_BIT = 0x00000040,
    e_COLOR_ATTACHMENT_BIT = 0x00000080,
    e_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
    e_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
    e_BLIT_SRC_BIT = 0x00000400,
    e_BLIT_DST_BIT = 0x00000800,
    e_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
    e_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,
    e_TRANSFER_SRC_BIT_KHR = 0x00004000,
    e_TRANSFER_DST_BIT_KHR = 0x00008000,
    e_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = 0x00010000,
    e_MAX_ENUM = 0x7FFFFFFF
} VkFormatFeatureFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkFormatFeatureFlags)

typedef enum class VkImageUsageFlags {
    e_TRANSFER_SRC_BIT = 0x00000001,
    e_TRANSFER_DST_BIT = 0x00000002,
    e_SAMPLED_BIT = 0x00000004,
    e_STORAGE_BIT = 0x00000008,
    e_COLOR_ATTACHMENT_BIT = 0x00000010,
    e_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
    e_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
    e_INPUT_ATTACHMENT_BIT = 0x00000080,
    e_MAX_ENUM = 0x7FFFFFFF
} VkImageUsageFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkImageUsageFlags)

typedef enum class VkImageCreateFlags {
    e_SPARSE_BINDING_BIT = 0x00000001,
    e_SPARSE_RESIDENCY_BIT = 0x00000002,
    e_SPARSE_ALIASED_BIT = 0x00000004,
    e_MUTABLE_FORMAT_BIT = 0x00000008,
    e_CUBE_COMPATIBLE_BIT = 0x00000010,
    e_BIND_SFR_BIT_KHX = 0x00000040,
    e_2D_ARRAY_COMPATIBLE_BIT_KHR = 0x00000020,
    e_MAX_ENUM = 0x7FFFFFFF
} VkImageCreateFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkImageCreateFlags)

typedef enum class VkSampleCountFlags {
    e_1_BIT = 0x00000001,
    e_2_BIT = 0x00000002,
    e_4_BIT = 0x00000004,
    e_8_BIT = 0x00000008,
    e_16_BIT = 0x00000010,
    e_32_BIT = 0x00000020,
    e_64_BIT = 0x00000040,
    e_MAX_ENUM = 0x7FFFFFFF
} VkSampleCountFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkSampleCountFlags)

typedef enum class VkQueueFlags {
    e_GRAPHICS_BIT = 0x00000001,
    e_COMPUTE_BIT = 0x00000002,
    e_TRANSFER_BIT = 0x00000004,
    e_SPARSE_BINDING_BIT = 0x00000008,
    e_MAX_ENUM = 0x7FFFFFFF
} VkQueueFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkQueueFlags)

typedef enum class VkMemoryPropertyFlags {
    e_DEVICE_LOCAL_BIT = 0x00000001,
    e_HOST_VISIBLE_BIT = 0x00000002,
    e_HOST_COHERENT_BIT = 0x00000004,
    e_HOST_CACHED_BIT = 0x00000008,
    e_LAZILY_ALLOCATED_BIT = 0x00000010,
    e_MAX_ENUM = 0x7FFFFFFF
} VkMemoryPropertyFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkMemoryPropertyFlags)

typedef enum class VkMemoryHeapFlags {
    e_DEVICE_LOCAL_BIT = 0x00000001,
    e_MULTI_INSTANCE_BIT_KHX = 0x00000002,
    e_MAX_ENUM = 0x7FFFFFFF
} VkMemoryHeapFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkMemoryHeapFlags)
typedef VkFlags VkDeviceCreateFlags;
typedef VkFlags VkDeviceQueueCreateFlags;

typedef enum class VkPipelineStageFlags {
    e_TOP_OF_PIPE_BIT = 0x00000001,
    e_DRAW_INDIRECT_BIT = 0x00000002,
    e_VERTEX_INPUT_BIT = 0x00000004,
    e_VERTEX_SHADER_BIT = 0x00000008,
    e_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
    e_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
    e_GEOMETRY_SHADER_BIT = 0x00000040,
    e_FRAGMENT_SHADER_BIT = 0x00000080,
    e_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
    e_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
    e_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
    e_COMPUTE_SHADER_BIT = 0x00000800,
    e_TRANSFER_BIT = 0x00001000,
    e_BOTTOM_OF_PIPE_BIT = 0x00002000,
    e_HOST_BIT = 0x00004000,
    e_ALL_GRAPHICS_BIT = 0x00008000,
    e_ALL_COMMANDS_BIT = 0x00010000,
    e_COMMAND_PROCESS_BIT_NVX = 0x00020000,
    e_MAX_ENUM = 0x7FFFFFFF
} VkPipelineStageFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkPipelineStageFlags)
typedef VkFlags VkMemoryMapFlags;

typedef enum class VkImageAspectFlags {
    e_COLOR_BIT = 0x00000001,
    e_DEPTH_BIT = 0x00000002,
    e_STENCIL_BIT = 0x00000004,
    e_METADATA_BIT = 0x00000008,
    e_MAX_ENUM = 0x7FFFFFFF
} VkImageAspectFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkImageAspectFlags)

typedef enum class VkSparseImageFormatFlags {
    e_SINGLE_MIPTAIL_BIT = 0x00000001,
    e_ALIGNED_MIP_SIZE_BIT = 0x00000002,
    e_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
    e_MAX_ENUM = 0x7FFFFFFF
} VkSparseImageFormatFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkSparseImageFormatFlags)

typedef enum class VkSparseMemoryBindFlags {
    e_METADATA_BIT = 0x00000001,
    e_MAX_ENUM = 0x7FFFFFFF
} VkSparseMemoryBindFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkSparseMemoryBindFlags)

typedef enum class VkFenceCreateFlags {
    e_SIGNALED_BIT = 0x00000001,
    e_MAX_ENUM = 0x7FFFFFFF
} VkFenceCreateFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkFenceCreateFlags)
typedef VkFlags VkSemaphoreCreateFlags;
typedef VkFlags VkEventCreateFlags;
typedef VkFlags VkQueryPoolCreateFlags;

typedef enum class VkQueryPipelineStatisticFlags {
    e_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
    e_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
    e_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
    e_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
    e_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
    e_CLIPPING_INVOCATIONS_BIT = 0x00000020,
    e_CLIPPING_PRIMITIVES_BIT = 0x00000040,
    e_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
    e_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
    e_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
    e_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
    e_MAX_ENUM = 0x7FFFFFFF
} VkQueryPipelineStatisticFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkQueryPipelineStatisticFlags)

typedef enum class VkQueryResultFlags {
    e_64_BIT = 0x00000001,
    e_WAIT_BIT = 0x00000002,
    e_WITH_AVAILABILITY_BIT = 0x00000004,
    e_PARTIAL_BIT = 0x00000008,
    e_MAX_ENUM = 0x7FFFFFFF
} VkQueryResultFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkQueryResultFlags)

typedef enum class VkBufferCreateFlags {
    e_SPARSE_BINDING_BIT = 0x00000001,
    e_SPARSE_RESIDENCY_BIT = 0x00000002,
    e_SPARSE_ALIASED_BIT = 0x00000004,
    e_MAX_ENUM = 0x7FFFFFFF
} VkBufferCreateFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkBufferCreateFlags)

typedef enum class VkBufferUsageFlags {
    e_TRANSFER_SRC_BIT = 0x00000001,
    e_TRANSFER_DST_BIT = 0x00000002,
    e_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
    e_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
    e_UNIFORM_BUFFER_BIT = 0x00000010,
    e_STORAGE_BUFFER_BIT = 0x00000020,
    e_INDEX_BUFFER_BIT = 0x00000040,
    e_VERTEX_BUFFER_BIT = 0x00000080,
    e_INDIRECT_BUFFER_BIT = 0x00000100,
    e_MAX_ENUM = 0x7FFFFFFF
} VkBufferUsageFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkBufferUsageFlags)
typedef VkFlags VkBufferViewCreateFlags;
typedef VkFlags VkImageViewCreateFlags;
typedef VkFlags VkShaderModuleCreateFlags;
typedef VkFlags VkPipelineCacheCreateFlags;

typedef enum class VkPipelineCreateFlags {
    e_DISABLE_OPTIMIZATION_BIT = 0x00000001,
    e_ALLOW_DERIVATIVES_BIT = 0x00000002,
    e_DERIVATIVE_BIT = 0x00000004,
    e_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHX = 0x00000008,
    e_DISPATCH_BASE_KHX = 0x00000010,
    e_MAX_ENUM = 0x7FFFFFFF
} VkPipelineCreateFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkPipelineCreateFlags)
typedef VkFlags VkPipelineShaderStageCreateFlags;

typedef enum class VkShaderStageFlags {
    e_VERTEX_BIT = 0x00000001,
    e_TESSELLATION_CONTROL_BIT = 0x00000002,
    e_TESSELLATION_EVALUATION_BIT = 0x00000004,
    e_GEOMETRY_BIT = 0x00000008,
    e_FRAGMENT_BIT = 0x00000010,
    e_COMPUTE_BIT = 0x00000020,
    e_ALL_GRAPHICS = 0x0000001F,
    e_ALL = 0x7FFFFFFF,
    e_MAX_ENUM = 0x7FFFFFFF
} VkShaderStageFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkShaderStageFlags)
typedef VkFlags VkPipelineVertexInputStateCreateFlags;
typedef VkFlags VkPipelineInputAssemblyStateCreateFlags;
typedef VkFlags VkPipelineTessellationStateCreateFlags;
typedef VkFlags VkPipelineViewportStateCreateFlags;
typedef VkFlags VkPipelineRasterizationStateCreateFlags;

typedef enum class VkCullModeFlags {
    e_NONE = 0,
    e_FRONT_BIT = 0x00000001,
    e_BACK_BIT = 0x00000002,
    e_FRONT_AND_BACK = 0x00000003,
    e_MAX_ENUM = 0x7FFFFFFF
} VkCullModeFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkCullModeFlags)
typedef VkFlags VkPipelineMultisampleStateCreateFlags;
typedef VkFlags VkPipelineDepthStencilStateCreateFlags;
typedef VkFlags VkPipelineColorBlendStateCreateFlags;

typedef enum class VkColorComponentFlags {
    e_R_BIT = 0x00000001,
    e_G_BIT = 0x00000002,
    e_B_BIT = 0x00000004,
    e_A_BIT = 0x00000008,
    e_MAX_ENUM = 0x7FFFFFFF
} VkColorComponentFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkColorComponentFlags)
typedef VkFlags VkPipelineDynamicStateCreateFlags;
typedef VkFlags VkPipelineLayoutCreateFlags;
typedef VkFlags VkSamplerCreateFlags;

typedef enum class VkDescriptorSetLayoutCreateFlags {
    e_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001,
    e_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorSetLayoutCreateFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkDescriptorSetLayoutCreateFlags)

typedef enum class VkDescriptorPoolCreateFlags {
    e_FREE_DESCRIPTOR_SET_BIT = 0x00000001,
    e_MAX_ENUM = 0x7FFFFFFF
} VkDescriptorPoolCreateFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkDescriptorPoolCreateFlags)
typedef VkFlags VkDescriptorPoolResetFlags;
typedef VkFlags VkFramebufferCreateFlags;
typedef VkFlags VkRenderPassCreateFlags;

typedef enum class VkAttachmentDescriptionFlags {
    e_MAY_ALIAS_BIT = 0x00000001,
    e_MAX_ENUM = 0x7FFFFFFF
} VkAttachmentDescriptionFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkAttachmentDescriptionFlags)

typedef enum class VkSubpassDescriptionFlags {
    e_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001,
    e_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
    e_MAX_ENUM = 0x7FFFFFFF
} VkSubpassDescriptionFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkSubpassDescriptionFlags)

typedef enum class VkAccessFlags {
    e_INDIRECT_COMMAND_READ_BIT = 0x00000001,
    e_INDEX_READ_BIT = 0x00000002,
    e_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
    e_UNIFORM_READ_BIT = 0x00000008,
    e_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
    e_SHADER_READ_BIT = 0x00000020,
    e_SHADER_WRITE_BIT = 0x00000040,
    e_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
    e_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
    e_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
    e_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
    e_TRANSFER_READ_BIT = 0x00000800,
    e_TRANSFER_WRITE_BIT = 0x00001000,
    e_HOST_READ_BIT = 0x00002000,
    e_HOST_WRITE_BIT = 0x00004000,
    e_MEMORY_READ_BIT = 0x00008000,
    e_MEMORY_WRITE_BIT = 0x00010000,
    e_COMMAND_PROCESS_READ_BIT_NVX = 0x00020000,
    e_COMMAND_PROCESS_WRITE_BIT_NVX = 0x00040000,
    e_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    e_MAX_ENUM = 0x7FFFFFFF
} VkAccessFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkAccessFlags)

typedef enum class VkDependencyFlags {
    e_BY_REGION_BIT = 0x00000001,
    e_VIEW_LOCAL_BIT_KHX = 0x00000002,
    e_DEVICE_GROUP_BIT_KHX = 0x00000004,
    e_MAX_ENUM = 0x7FFFFFFF
} VkDependencyFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkDependencyFlags)

typedef enum class VkCommandPoolCreateFlags {
    e_TRANSIENT_BIT = 0x00000001,
    e_RESET_COMMAND_BUFFER_BIT = 0x00000002,
    e_MAX_ENUM = 0x7FFFFFFF
} VkCommandPoolCreateFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkCommandPoolCreateFlags)

typedef enum class VkCommandPoolResetFlags {
    e_RELEASE_RESOURCES_BIT = 0x00000001,
    e_MAX_ENUM = 0x7FFFFFFF
} VkCommandPoolResetFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkCommandPoolResetFlags)

typedef enum class VkCommandBufferUsageFlags {
    e_ONE_TIME_SUBMIT_BIT = 0x00000001,
    e_RENDER_PASS_CONTINUE_BIT = 0x00000002,
    e_SIMULTANEOUS_USE_BIT = 0x00000004,
    e_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferUsageFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkCommandBufferUsageFlags)

typedef enum class VkQueryControlFlags {
    e_PRECISE_BIT = 0x00000001,
    e_MAX_ENUM = 0x7FFFFFFF
} VkQueryControlFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkQueryControlFlags)

typedef enum class VkCommandBufferResetFlags {
    e_RELEASE_RESOURCES_BIT = 0x00000001,
    e_MAX_ENUM = 0x7FFFFFFF
} VkCommandBufferResetFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkCommandBufferResetFlags)

typedef enum class VkStencilFaceFlags {
    e_FRONT_BIT = 0x00000001,
    e_BACK_BIT = 0x00000002,
    e_FRONT_AND_BACK = 0x00000003,
    e_MAX_ENUM = 0x7FFFFFFF
} VkStencilFaceFlags;
DEFINE_ENUM_BITWISE_OPERATORS(VkStencilFaceFlags)

typedef struct VkApplicationInfo {
    VkStructureType    sType;
    const void*        pNext;
    const char*        pApplicationName;
    uint32_t           applicationVersion;
    const char*        pEngineName;
    uint32_t           engineVersion;
    uint32_t           apiVersion;
} VkApplicationInfo;

typedef struct VkInstanceCreateInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkInstanceCreateFlags       flags;
    const VkApplicationInfo*    pApplicationInfo;
    uint32_t                    enabledLayerCount;
    const char* const*          ppEnabledLayerNames;
    uint32_t                    enabledExtensionCount;
    const char* const*          ppEnabledExtensionNames;
} VkInstanceCreateInfo;

typedef void* (VKAPI_PTR *PFN_vkAllocationFunction)(
    void*                                       pUserData,
    size_t                                      size,
    size_t                                      alignment,
    VkSystemAllocationScope                     allocationScope);

typedef void* (VKAPI_PTR *PFN_vkReallocationFunction)(
    void*                                       pUserData,
    void*                                       pOriginal,
    size_t                                      size,
    size_t                                      alignment,
    VkSystemAllocationScope                     allocationScope);

typedef void (VKAPI_PTR *PFN_vkFreeFunction)(
    void*                                       pUserData,
    void*                                       pMemory);

typedef void (VKAPI_PTR *PFN_vkInternalAllocationNotification)(
    void*                                       pUserData,
    size_t                                      size,
    VkInternalAllocationType                    allocationType,
    VkSystemAllocationScope                     allocationScope);

typedef void (VKAPI_PTR *PFN_vkInternalFreeNotification)(
    void*                                       pUserData,
    size_t                                      size,
    VkInternalAllocationType                    allocationType,
    VkSystemAllocationScope                     allocationScope);

typedef struct VkAllocationCallbacks {
    void*                                   pUserData;
    PFN_vkAllocationFunction                pfnAllocation;
    PFN_vkReallocationFunction              pfnReallocation;
    PFN_vkFreeFunction                      pfnFree;
    PFN_vkInternalAllocationNotification    pfnInternalAllocation;
    PFN_vkInternalFreeNotification          pfnInternalFree;
} VkAllocationCallbacks;

typedef struct VkPhysicalDeviceFeatures {
    VkBool32    robustBufferAccess;
    VkBool32    fullDrawIndexUint32;
    VkBool32    imageCubeArray;
    VkBool32    independentBlend;
    VkBool32    geometryShader;
    VkBool32    tessellationShader;
    VkBool32    sampleRateShading;
    VkBool32    dualSrcBlend;
    VkBool32    logicOp;
    VkBool32    multiDrawIndirect;
    VkBool32    drawIndirectFirstInstance;
    VkBool32    depthClamp;
    VkBool32    depthBiasClamp;
    VkBool32    fillModeNonSolid;
    VkBool32    depthBounds;
    VkBool32    wideLines;
    VkBool32    largePoints;
    VkBool32    alphaToOne;
    VkBool32    multiViewport;
    VkBool32    samplerAnisotropy;
    VkBool32    textureCompressionETC2;
    VkBool32    textureCompressionASTC_LDR;
    VkBool32    textureCompressionBC;
    VkBool32    occlusionQueryPrecise;
    VkBool32    pipelineStatisticsQuery;
    VkBool32    vertexPipelineStoresAndAtomics;
    VkBool32    fragmentStoresAndAtomics;
    VkBool32    shaderTessellationAndGeometryPointSize;
    VkBool32    shaderImageGatherExtended;
    VkBool32    shaderStorageImageExtendedFormats;
    VkBool32    shaderStorageImageMultisample;
    VkBool32    shaderStorageImageReadWithoutFormat;
    VkBool32    shaderStorageImageWriteWithoutFormat;
    VkBool32    shaderUniformBufferArrayDynamicIndexing;
    VkBool32    shaderSampledImageArrayDynamicIndexing;
    VkBool32    shaderStorageBufferArrayDynamicIndexing;
    VkBool32    shaderStorageImageArrayDynamicIndexing;
    VkBool32    shaderClipDistance;
    VkBool32    shaderCullDistance;
    VkBool32    shaderFloat64;
    VkBool32    shaderInt64;
    VkBool32    shaderInt16;
    VkBool32    shaderResourceResidency;
    VkBool32    shaderResourceMinLod;
    VkBool32    sparseBinding;
    VkBool32    sparseResidencyBuffer;
    VkBool32    sparseResidencyImage2D;
    VkBool32    sparseResidencyImage3D;
    VkBool32    sparseResidency2Samples;
    VkBool32    sparseResidency4Samples;
    VkBool32    sparseResidency8Samples;
    VkBool32    sparseResidency16Samples;
    VkBool32    sparseResidencyAliased;
    VkBool32    variableMultisampleRate;
    VkBool32    inheritedQueries;
} VkPhysicalDeviceFeatures;

typedef struct VkFormatProperties {
    VkFormatFeatureFlags    linearTilingFeatures;
    VkFormatFeatureFlags    optimalTilingFeatures;
    VkFormatFeatureFlags    bufferFeatures;
} VkFormatProperties;

typedef struct VkExtent3D {
    uint32_t    width;
    uint32_t    height;
    uint32_t    depth;
} VkExtent3D;

typedef struct VkImageFormatProperties {
    VkExtent3D            maxExtent;
    uint32_t              maxMipLevels;
    uint32_t              maxArrayLayers;
    VkSampleCountFlags    sampleCounts;
    VkDeviceSize          maxResourceSize;
} VkImageFormatProperties;

typedef struct VkPhysicalDeviceLimits {
    uint32_t              maxImageDimension1D;
    uint32_t              maxImageDimension2D;
    uint32_t              maxImageDimension3D;
    uint32_t              maxImageDimensionCube;
    uint32_t              maxImageArrayLayers;
    uint32_t              maxTexelBufferElements;
    uint32_t              maxUniformBufferRange;
    uint32_t              maxStorageBufferRange;
    uint32_t              maxPushConstantsSize;
    uint32_t              maxMemoryAllocationCount;
    uint32_t              maxSamplerAllocationCount;
    VkDeviceSize          bufferImageGranularity;
    VkDeviceSize          sparseAddressSpaceSize;
    uint32_t              maxBoundDescriptorSets;
    uint32_t              maxPerStageDescriptorSamplers;
    uint32_t              maxPerStageDescriptorUniformBuffers;
    uint32_t              maxPerStageDescriptorStorageBuffers;
    uint32_t              maxPerStageDescriptorSampledImages;
    uint32_t              maxPerStageDescriptorStorageImages;
    uint32_t              maxPerStageDescriptorInputAttachments;
    uint32_t              maxPerStageResources;
    uint32_t              maxDescriptorSetSamplers;
    uint32_t              maxDescriptorSetUniformBuffers;
    uint32_t              maxDescriptorSetUniformBuffersDynamic;
    uint32_t              maxDescriptorSetStorageBuffers;
    uint32_t              maxDescriptorSetStorageBuffersDynamic;
    uint32_t              maxDescriptorSetSampledImages;
    uint32_t              maxDescriptorSetStorageImages;
    uint32_t              maxDescriptorSetInputAttachments;
    uint32_t              maxVertexInputAttributes;
    uint32_t              maxVertexInputBindings;
    uint32_t              maxVertexInputAttributeOffset;
    uint32_t              maxVertexInputBindingStride;
    uint32_t              maxVertexOutputComponents;
    uint32_t              maxTessellationGenerationLevel;
    uint32_t              maxTessellationPatchSize;
    uint32_t              maxTessellationControlPerVertexInputComponents;
    uint32_t              maxTessellationControlPerVertexOutputComponents;
    uint32_t              maxTessellationControlPerPatchOutputComponents;
    uint32_t              maxTessellationControlTotalOutputComponents;
    uint32_t              maxTessellationEvaluationInputComponents;
    uint32_t              maxTessellationEvaluationOutputComponents;
    uint32_t              maxGeometryShaderInvocations;
    uint32_t              maxGeometryInputComponents;
    uint32_t              maxGeometryOutputComponents;
    uint32_t              maxGeometryOutputVertices;
    uint32_t              maxGeometryTotalOutputComponents;
    uint32_t              maxFragmentInputComponents;
    uint32_t              maxFragmentOutputAttachments;
    uint32_t              maxFragmentDualSrcAttachments;
    uint32_t              maxFragmentCombinedOutputResources;
    uint32_t              maxComputeSharedMemorySize;
    uint32_t              maxComputeWorkGroupCount[3];
    uint32_t              maxComputeWorkGroupInvocations;
    uint32_t              maxComputeWorkGroupSize[3];
    uint32_t              subPixelPrecisionBits;
    uint32_t              subTexelPrecisionBits;
    uint32_t              mipmapPrecisionBits;
    uint32_t              maxDrawIndexedIndexValue;
    uint32_t              maxDrawIndirectCount;
    float                 maxSamplerLodBias;
    float                 maxSamplerAnisotropy;
    uint32_t              maxViewports;
    uint32_t              maxViewportDimensions[2];
    float                 viewportBoundsRange[2];
    uint32_t              viewportSubPixelBits;
    size_t                minMemoryMapAlignment;
    VkDeviceSize          minTexelBufferOffsetAlignment;
    VkDeviceSize          minUniformBufferOffsetAlignment;
    VkDeviceSize          minStorageBufferOffsetAlignment;
    int32_t               minTexelOffset;
    uint32_t              maxTexelOffset;
    int32_t               minTexelGatherOffset;
    uint32_t              maxTexelGatherOffset;
    float                 minInterpolationOffset;
    float                 maxInterpolationOffset;
    uint32_t              subPixelInterpolationOffsetBits;
    uint32_t              maxFramebufferWidth;
    uint32_t              maxFramebufferHeight;
    uint32_t              maxFramebufferLayers;
    VkSampleCountFlags    framebufferColorSampleCounts;
    VkSampleCountFlags    framebufferDepthSampleCounts;
    VkSampleCountFlags    framebufferStencilSampleCounts;
    VkSampleCountFlags    framebufferNoAttachmentsSampleCounts;
    uint32_t              maxColorAttachments;
    VkSampleCountFlags    sampledImageColorSampleCounts;
    VkSampleCountFlags    sampledImageIntegerSampleCounts;
    VkSampleCountFlags    sampledImageDepthSampleCounts;
    VkSampleCountFlags    sampledImageStencilSampleCounts;
    VkSampleCountFlags    storageImageSampleCounts;
    uint32_t              maxSampleMaskWords;
    VkBool32              timestampComputeAndGraphics;
    float                 timestampPeriod;
    uint32_t              maxClipDistances;
    uint32_t              maxCullDistances;
    uint32_t              maxCombinedClipAndCullDistances;
    uint32_t              discreteQueuePriorities;
    float                 pointSizeRange[2];
    float                 lineWidthRange[2];
    float                 pointSizeGranularity;
    float                 lineWidthGranularity;
    VkBool32              strictLines;
    VkBool32              standardSampleLocations;
    VkDeviceSize          optimalBufferCopyOffsetAlignment;
    VkDeviceSize          optimalBufferCopyRowPitchAlignment;
    VkDeviceSize          nonCoherentAtomSize;
} VkPhysicalDeviceLimits;

typedef struct VkPhysicalDeviceSparseProperties {
    VkBool32    residencyStandard2DBlockShape;
    VkBool32    residencyStandard2DMultisampleBlockShape;
    VkBool32    residencyStandard3DBlockShape;
    VkBool32    residencyAlignedMipSize;
    VkBool32    residencyNonResidentStrict;
} VkPhysicalDeviceSparseProperties;

typedef struct VkPhysicalDeviceProperties {
    uint32_t                            apiVersion;
    uint32_t                            driverVersion;
    uint32_t                            vendorID;
    uint32_t                            deviceID;
    VkPhysicalDeviceType                deviceType;
    char                                deviceName[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE];
    uint8_t                             pipelineCacheUUID[VK_UUID_SIZE];
    VkPhysicalDeviceLimits              limits;
    VkPhysicalDeviceSparseProperties    sparseProperties;
} VkPhysicalDeviceProperties;

typedef struct VkQueueFamilyProperties {
    VkQueueFlags    queueFlags;
    uint32_t        queueCount;
    uint32_t        timestampValidBits;
    VkExtent3D      minImageTransferGranularity;
} VkQueueFamilyProperties;

typedef struct VkMemoryType {
    VkMemoryPropertyFlags    propertyFlags;
    uint32_t                 heapIndex;
} VkMemoryType;

typedef struct VkMemoryHeap {
    VkDeviceSize         size;
    VkMemoryHeapFlags    flags;
} VkMemoryHeap;

typedef struct VkPhysicalDeviceMemoryProperties {
    uint32_t        memoryTypeCount;
    VkMemoryType    memoryTypes[VK_MAX_MEMORY_TYPES];
    uint32_t        memoryHeapCount;
    VkMemoryHeap    memoryHeaps[VK_MAX_MEMORY_HEAPS];
} VkPhysicalDeviceMemoryProperties;

typedef void (VKAPI_PTR *PFN_vkVoidFunction)(void);
typedef struct VkDeviceQueueCreateInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkDeviceQueueCreateFlags    flags;
    uint32_t                    queueFamilyIndex;
    uint32_t                    queueCount;
    const float*                pQueuePriorities;
} VkDeviceQueueCreateInfo;

typedef struct VkDeviceCreateInfo {
    VkStructureType                    sType;
    const void*                        pNext;
    VkDeviceCreateFlags                flags;
    uint32_t                           queueCreateInfoCount;
    const VkDeviceQueueCreateInfo*     pQueueCreateInfos;
    uint32_t                           enabledLayerCount;
    const char* const*                 ppEnabledLayerNames;
    uint32_t                           enabledExtensionCount;
    const char* const*                 ppEnabledExtensionNames;
    const VkPhysicalDeviceFeatures*    pEnabledFeatures;
} VkDeviceCreateInfo;

typedef struct VkExtensionProperties {
    char        extensionName[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t    specVersion;
} VkExtensionProperties;

typedef struct VkLayerProperties {
    char        layerName[VK_MAX_EXTENSION_NAME_SIZE];
    uint32_t    specVersion;
    uint32_t    implementationVersion;
    char        description[VK_MAX_DESCRIPTION_SIZE];
} VkLayerProperties;

typedef struct VkSubmitInfo {
    VkStructureType                sType;
    const void*                    pNext;
    uint32_t                       waitSemaphoreCount;
    const VkSemaphore*             pWaitSemaphores;
    const VkPipelineStageFlags*    pWaitDstStageMask;
    uint32_t                       commandBufferCount;
    const VkCommandBuffer*         pCommandBuffers;
    uint32_t                       signalSemaphoreCount;
    const VkSemaphore*             pSignalSemaphores;
} VkSubmitInfo;

typedef struct VkMemoryAllocateInfo {
    VkStructureType    sType;
    const void*        pNext;
    VkDeviceSize       allocationSize;
    uint32_t           memoryTypeIndex;
} VkMemoryAllocateInfo;

typedef struct VkMappedMemoryRange {
    VkStructureType    sType;
    const void*        pNext;
    VkDeviceMemory     memory;
    VkDeviceSize       offset;
    VkDeviceSize       size;
} VkMappedMemoryRange;

typedef struct VkMemoryRequirements {
    VkDeviceSize    size;
    VkDeviceSize    alignment;
    uint32_t        memoryTypeBits;
} VkMemoryRequirements;

typedef struct VkSparseImageFormatProperties {
    VkImageAspectFlags          aspectMask;
    VkExtent3D                  imageGranularity;
    VkSparseImageFormatFlags    flags;
} VkSparseImageFormatProperties;

typedef struct VkSparseImageMemoryRequirements {
    VkSparseImageFormatProperties    formatProperties;
    uint32_t                         imageMipTailFirstLod;
    VkDeviceSize                     imageMipTailSize;
    VkDeviceSize                     imageMipTailOffset;
    VkDeviceSize                     imageMipTailStride;
} VkSparseImageMemoryRequirements;

typedef struct VkSparseMemoryBind {
    VkDeviceSize               resourceOffset;
    VkDeviceSize               size;
    VkDeviceMemory             memory;
    VkDeviceSize               memoryOffset;
    VkSparseMemoryBindFlags    flags;
} VkSparseMemoryBind;

typedef struct VkSparseBufferMemoryBindInfo {
    VkBuffer                     buffer;
    uint32_t                     bindCount;
    const VkSparseMemoryBind*    pBinds;
} VkSparseBufferMemoryBindInfo;

typedef struct VkSparseImageOpaqueMemoryBindInfo {
    VkImage                      image;
    uint32_t                     bindCount;
    const VkSparseMemoryBind*    pBinds;
} VkSparseImageOpaqueMemoryBindInfo;

typedef struct VkImageSubresource {
    VkImageAspectFlags    aspectMask;
    uint32_t              mipLevel;
    uint32_t              arrayLayer;
} VkImageSubresource;

typedef struct VkOffset3D {
    int32_t    x;
    int32_t    y;
    int32_t    z;
} VkOffset3D;

typedef struct VkSparseImageMemoryBind {
    VkImageSubresource         subresource;
    VkOffset3D                 offset;
    VkExtent3D                 extent;
    VkDeviceMemory             memory;
    VkDeviceSize               memoryOffset;
    VkSparseMemoryBindFlags    flags;
} VkSparseImageMemoryBind;

typedef struct VkSparseImageMemoryBindInfo {
    VkImage                           image;
    uint32_t                          bindCount;
    const VkSparseImageMemoryBind*    pBinds;
} VkSparseImageMemoryBindInfo;

typedef struct VkBindSparseInfo {
    VkStructureType                             sType;
    const void*                                 pNext;
    uint32_t                                    waitSemaphoreCount;
    const VkSemaphore*                          pWaitSemaphores;
    uint32_t                                    bufferBindCount;
    const VkSparseBufferMemoryBindInfo*         pBufferBinds;
    uint32_t                                    imageOpaqueBindCount;
    const VkSparseImageOpaqueMemoryBindInfo*    pImageOpaqueBinds;
    uint32_t                                    imageBindCount;
    const VkSparseImageMemoryBindInfo*          pImageBinds;
    uint32_t                                    signalSemaphoreCount;
    const VkSemaphore*                          pSignalSemaphores;
} VkBindSparseInfo;

typedef struct VkFenceCreateInfo {
    VkStructureType       sType;
    const void*           pNext;
    VkFenceCreateFlags    flags;
} VkFenceCreateInfo;

typedef struct VkSemaphoreCreateInfo {
    VkStructureType           sType;
    const void*               pNext;
    VkSemaphoreCreateFlags    flags;
} VkSemaphoreCreateInfo;

typedef struct VkEventCreateInfo {
    VkStructureType       sType;
    const void*           pNext;
    VkEventCreateFlags    flags;
} VkEventCreateInfo;

typedef struct VkQueryPoolCreateInfo {
    VkStructureType                  sType;
    const void*                      pNext;
    VkQueryPoolCreateFlags           flags;
    VkQueryType                      queryType;
    uint32_t                         queryCount;
    VkQueryPipelineStatisticFlags    pipelineStatistics;
} VkQueryPoolCreateInfo;

typedef struct VkBufferCreateInfo {
    VkStructureType        sType;
    const void*            pNext;
    VkBufferCreateFlags    flags;
    VkDeviceSize           size;
    VkBufferUsageFlags     usage;
    VkSharingMode          sharingMode;
    uint32_t               queueFamilyIndexCount;
    const uint32_t*        pQueueFamilyIndices;
} VkBufferCreateInfo;

typedef struct VkBufferViewCreateInfo {
    VkStructureType            sType;
    const void*                pNext;
    VkBufferViewCreateFlags    flags;
    VkBuffer                   buffer;
    VkFormat                   format;
    VkDeviceSize               offset;
    VkDeviceSize               range;
} VkBufferViewCreateInfo;

typedef struct VkImageCreateInfo {
    VkStructureType          sType;
    const void*              pNext;
    VkImageCreateFlags       flags;
    VkImageType              imageType;
    VkFormat                 format;
    VkExtent3D               extent;
    uint32_t                 mipLevels;
    uint32_t                 arrayLayers;
    VkSampleCountFlags    samples;
    VkImageTiling            tiling;
    VkImageUsageFlags        usage;
    VkSharingMode            sharingMode;
    uint32_t                 queueFamilyIndexCount;
    const uint32_t*          pQueueFamilyIndices;
    VkImageLayout            initialLayout;
} VkImageCreateInfo;

typedef struct VkSubresourceLayout {
    VkDeviceSize    offset;
    VkDeviceSize    size;
    VkDeviceSize    rowPitch;
    VkDeviceSize    arrayPitch;
    VkDeviceSize    depthPitch;
} VkSubresourceLayout;

typedef struct VkComponentMapping {
    VkComponentSwizzle    r;
    VkComponentSwizzle    g;
    VkComponentSwizzle    b;
    VkComponentSwizzle    a;
} VkComponentMapping;

typedef struct VkImageSubresourceRange {
    VkImageAspectFlags    aspectMask;
    uint32_t              baseMipLevel;
    uint32_t              levelCount;
    uint32_t              baseArrayLayer;
    uint32_t              layerCount;
} VkImageSubresourceRange;

typedef struct VkImageViewCreateInfo {
    VkStructureType            sType;
    const void*                pNext;
    VkImageViewCreateFlags     flags;
    VkImage                    image;
    VkImageViewType            viewType;
    VkFormat                   format;
    VkComponentMapping         components;
    VkImageSubresourceRange    subresourceRange;
} VkImageViewCreateInfo;

typedef struct VkShaderModuleCreateInfo {
    VkStructureType              sType;
    const void*                  pNext;
    VkShaderModuleCreateFlags    flags;
    size_t                       codeSize;
    const uint32_t*              pCode;
} VkShaderModuleCreateInfo;

typedef struct VkPipelineCacheCreateInfo {
    VkStructureType               sType;
    const void*                   pNext;
    VkPipelineCacheCreateFlags    flags;
    size_t                        initialDataSize;
    const void*                   pInitialData;
} VkPipelineCacheCreateInfo;

typedef struct VkSpecializationMapEntry {
    uint32_t    constantID;
    uint32_t    offset;
    size_t      size;
} VkSpecializationMapEntry;

typedef struct VkSpecializationInfo {
    uint32_t                           mapEntryCount;
    const VkSpecializationMapEntry*    pMapEntries;
    size_t                             dataSize;
    const void*                        pData;
} VkSpecializationInfo;

typedef struct VkPipelineShaderStageCreateInfo {
    VkStructureType                     sType;
    const void*                         pNext;
    VkPipelineShaderStageCreateFlags    flags;
    VkShaderStageFlags               stage;
    VkShaderModule                      module;
    const char*                         pName;
    const VkSpecializationInfo*         pSpecializationInfo;
} VkPipelineShaderStageCreateInfo;

typedef struct VkVertexInputBindingDescription {
    uint32_t             binding;
    uint32_t             stride;
    VkVertexInputRate    inputRate;
} VkVertexInputBindingDescription;

typedef struct VkVertexInputAttributeDescription {
    uint32_t    location;
    uint32_t    binding;
    VkFormat    format;
    uint32_t    offset;
} VkVertexInputAttributeDescription;

typedef struct VkPipelineVertexInputStateCreateInfo {
    VkStructureType                             sType;
    const void*                                 pNext;
    VkPipelineVertexInputStateCreateFlags       flags;
    uint32_t                                    vertexBindingDescriptionCount;
    const VkVertexInputBindingDescription*      pVertexBindingDescriptions;
    uint32_t                                    vertexAttributeDescriptionCount;
    const VkVertexInputAttributeDescription*    pVertexAttributeDescriptions;
} VkPipelineVertexInputStateCreateInfo;

typedef struct VkPipelineInputAssemblyStateCreateInfo {
    VkStructureType                            sType;
    const void*                                pNext;
    VkPipelineInputAssemblyStateCreateFlags    flags;
    VkPrimitiveTopology                        topology;
    VkBool32                                   primitiveRestartEnable;
} VkPipelineInputAssemblyStateCreateInfo;

typedef struct VkPipelineTessellationStateCreateInfo {
    VkStructureType                           sType;
    const void*                               pNext;
    VkPipelineTessellationStateCreateFlags    flags;
    uint32_t                                  patchControlPoints;
} VkPipelineTessellationStateCreateInfo;

typedef struct VkViewport {
    float    x;
    float    y;
    float    width;
    float    height;
    float    minDepth;
    float    maxDepth;
} VkViewport;

typedef struct VkOffset2D {
    int32_t    x;
    int32_t    y;
} VkOffset2D;

typedef struct VkExtent2D {
    uint32_t    width;
    uint32_t    height;
} VkExtent2D;

typedef struct VkRect2D {
    VkOffset2D    offset;
    VkExtent2D    extent;
} VkRect2D;

typedef struct VkPipelineViewportStateCreateInfo {
    VkStructureType                       sType;
    const void*                           pNext;
    VkPipelineViewportStateCreateFlags    flags;
    uint32_t                              viewportCount;
    const VkViewport*                     pViewports;
    uint32_t                              scissorCount;
    const VkRect2D*                       pScissors;
} VkPipelineViewportStateCreateInfo;

typedef struct VkPipelineRasterizationStateCreateInfo {
    VkStructureType                            sType;
    const void*                                pNext;
    VkPipelineRasterizationStateCreateFlags    flags;
    VkBool32                                   depthClampEnable;
    VkBool32                                   rasterizerDiscardEnable;
    VkPolygonMode                              polygonMode;
    VkCullModeFlags                            cullMode;
    VkFrontFace                                frontFace;
    VkBool32                                   depthBiasEnable;
    float                                      depthBiasConstantFactor;
    float                                      depthBiasClamp;
    float                                      depthBiasSlopeFactor;
    float                                      lineWidth;
} VkPipelineRasterizationStateCreateInfo;

typedef struct VkPipelineMultisampleStateCreateInfo {
    VkStructureType                          sType;
    const void*                              pNext;
    VkPipelineMultisampleStateCreateFlags    flags;
    VkSampleCountFlags                    rasterizationSamples;
    VkBool32                                 sampleShadingEnable;
    float                                    minSampleShading;
    const VkSampleMask*                      pSampleMask;
    VkBool32                                 alphaToCoverageEnable;
    VkBool32                                 alphaToOneEnable;
} VkPipelineMultisampleStateCreateInfo;

typedef struct VkStencilOpState {
    VkStencilOp    failOp;
    VkStencilOp    passOp;
    VkStencilOp    depthFailOp;
    VkCompareOp    compareOp;
    uint32_t       compareMask;
    uint32_t       writeMask;
    uint32_t       reference;
} VkStencilOpState;

typedef struct VkPipelineDepthStencilStateCreateInfo {
    VkStructureType                           sType;
    const void*                               pNext;
    VkPipelineDepthStencilStateCreateFlags    flags;
    VkBool32                                  depthTestEnable;
    VkBool32                                  depthWriteEnable;
    VkCompareOp                               depthCompareOp;
    VkBool32                                  depthBoundsTestEnable;
    VkBool32                                  stencilTestEnable;
    VkStencilOpState                          front;
    VkStencilOpState                          back;
    float                                     minDepthBounds;
    float                                     maxDepthBounds;
} VkPipelineDepthStencilStateCreateInfo;

typedef struct VkPipelineColorBlendAttachmentState {
    VkBool32                 blendEnable;
    VkBlendFactor            srcColorBlendFactor;
    VkBlendFactor            dstColorBlendFactor;
    VkBlendOp                colorBlendOp;
    VkBlendFactor            srcAlphaBlendFactor;
    VkBlendFactor            dstAlphaBlendFactor;
    VkBlendOp                alphaBlendOp;
    VkColorComponentFlags    colorWriteMask;
} VkPipelineColorBlendAttachmentState;

typedef struct VkPipelineColorBlendStateCreateInfo {
    VkStructureType                               sType;
    const void*                                   pNext;
    VkPipelineColorBlendStateCreateFlags          flags;
    VkBool32                                      logicOpEnable;
    VkLogicOp                                     logicOp;
    uint32_t                                      attachmentCount;
    const VkPipelineColorBlendAttachmentState*    pAttachments;
    float                                         blendConstants[4];
} VkPipelineColorBlendStateCreateInfo;

typedef struct VkPipelineDynamicStateCreateInfo {
    VkStructureType                      sType;
    const void*                          pNext;
    VkPipelineDynamicStateCreateFlags    flags;
    uint32_t                             dynamicStateCount;
    const VkDynamicState*                pDynamicStates;
} VkPipelineDynamicStateCreateInfo;

typedef struct VkGraphicsPipelineCreateInfo {
    VkStructureType                                  sType;
    const void*                                      pNext;
    VkPipelineCreateFlags                            flags;
    uint32_t                                         stageCount;
    const VkPipelineShaderStageCreateInfo*           pStages;
    const VkPipelineVertexInputStateCreateInfo*      pVertexInputState;
    const VkPipelineInputAssemblyStateCreateInfo*    pInputAssemblyState;
    const VkPipelineTessellationStateCreateInfo*     pTessellationState;
    const VkPipelineViewportStateCreateInfo*         pViewportState;
    const VkPipelineRasterizationStateCreateInfo*    pRasterizationState;
    const VkPipelineMultisampleStateCreateInfo*      pMultisampleState;
    const VkPipelineDepthStencilStateCreateInfo*     pDepthStencilState;
    const VkPipelineColorBlendStateCreateInfo*       pColorBlendState;
    const VkPipelineDynamicStateCreateInfo*          pDynamicState;
    VkPipelineLayout                                 layout;
    VkRenderPass                                     renderPass;
    uint32_t                                         subpass;
    VkPipeline                                       basePipelineHandle;
    int32_t                                          basePipelineIndex;
} VkGraphicsPipelineCreateInfo;

typedef struct VkComputePipelineCreateInfo {
    VkStructureType                    sType;
    const void*                        pNext;
    VkPipelineCreateFlags              flags;
    VkPipelineShaderStageCreateInfo    stage;
    VkPipelineLayout                   layout;
    VkPipeline                         basePipelineHandle;
    int32_t                            basePipelineIndex;
} VkComputePipelineCreateInfo;

typedef struct VkPushConstantRange {
    VkShaderStageFlags    stageFlags;
    uint32_t              offset;
    uint32_t              size;
} VkPushConstantRange;

typedef struct VkPipelineLayoutCreateInfo {
    VkStructureType                 sType;
    const void*                     pNext;
    VkPipelineLayoutCreateFlags     flags;
    uint32_t                        setLayoutCount;
    const VkDescriptorSetLayout*    pSetLayouts;
    uint32_t                        pushConstantRangeCount;
    const VkPushConstantRange*      pPushConstantRanges;
} VkPipelineLayoutCreateInfo;

typedef struct VkSamplerCreateInfo {
    VkStructureType         sType;
    const void*             pNext;
    VkSamplerCreateFlags    flags;
    VkFilter                magFilter;
    VkFilter                minFilter;
    VkSamplerMipmapMode     mipmapMode;
    VkSamplerAddressMode    addressModeU;
    VkSamplerAddressMode    addressModeV;
    VkSamplerAddressMode    addressModeW;
    float                   mipLodBias;
    VkBool32                anisotropyEnable;
    float                   maxAnisotropy;
    VkBool32                compareEnable;
    VkCompareOp             compareOp;
    float                   minLod;
    float                   maxLod;
    VkBorderColor           borderColor;
    VkBool32                unnormalizedCoordinates;
} VkSamplerCreateInfo;

typedef struct VkDescriptorSetLayoutBinding {
    uint32_t              binding;
    VkDescriptorType      descriptorType;
    uint32_t              descriptorCount;
    VkShaderStageFlags    stageFlags;
    const VkSampler*      pImmutableSamplers;
} VkDescriptorSetLayoutBinding;

typedef struct VkDescriptorSetLayoutCreateInfo {
    VkStructureType                        sType;
    const void*                            pNext;
    VkDescriptorSetLayoutCreateFlags       flags;
    uint32_t                               bindingCount;
    const VkDescriptorSetLayoutBinding*    pBindings;
} VkDescriptorSetLayoutCreateInfo;

typedef struct VkDescriptorPoolSize {
    VkDescriptorType    type;
    uint32_t            descriptorCount;
} VkDescriptorPoolSize;

typedef struct VkDescriptorPoolCreateInfo {
    VkStructureType                sType;
    const void*                    pNext;
    VkDescriptorPoolCreateFlags    flags;
    uint32_t                       maxSets;
    uint32_t                       poolSizeCount;
    const VkDescriptorPoolSize*    pPoolSizes;
} VkDescriptorPoolCreateInfo;

typedef struct VkDescriptorSetAllocateInfo {
    VkStructureType                 sType;
    const void*                     pNext;
    VkDescriptorPool                descriptorPool;
    uint32_t                        descriptorSetCount;
    const VkDescriptorSetLayout*    pSetLayouts;
} VkDescriptorSetAllocateInfo;

typedef struct VkDescriptorImageInfo {
    VkSampler        sampler;
    VkImageView      imageView;
    VkImageLayout    imageLayout;
} VkDescriptorImageInfo;

typedef struct VkDescriptorBufferInfo {
    VkBuffer        buffer;
    VkDeviceSize    offset;
    VkDeviceSize    range;
} VkDescriptorBufferInfo;

typedef struct VkWriteDescriptorSet {
    VkStructureType                  sType;
    const void*                      pNext;
    VkDescriptorSet                  dstSet;
    uint32_t                         dstBinding;
    uint32_t                         dstArrayElement;
    uint32_t                         descriptorCount;
    VkDescriptorType                 descriptorType;
    const VkDescriptorImageInfo*     pImageInfo;
    const VkDescriptorBufferInfo*    pBufferInfo;
    const VkBufferView*              pTexelBufferView;
} VkWriteDescriptorSet;

typedef struct VkCopyDescriptorSet {
    VkStructureType    sType;
    const void*        pNext;
    VkDescriptorSet    srcSet;
    uint32_t           srcBinding;
    uint32_t           srcArrayElement;
    VkDescriptorSet    dstSet;
    uint32_t           dstBinding;
    uint32_t           dstArrayElement;
    uint32_t           descriptorCount;
} VkCopyDescriptorSet;

typedef struct VkFramebufferCreateInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkFramebufferCreateFlags    flags;
    VkRenderPass                renderPass;
    uint32_t                    attachmentCount;
    const VkImageView*          pAttachments;
    uint32_t                    width;
    uint32_t                    height;
    uint32_t                    layers;
} VkFramebufferCreateInfo;

typedef struct VkAttachmentDescription {
    VkAttachmentDescriptionFlags    flags;
    VkFormat                        format;
    VkSampleCountFlags           samples;
    VkAttachmentLoadOp              loadOp;
    VkAttachmentStoreOp             storeOp;
    VkAttachmentLoadOp              stencilLoadOp;
    VkAttachmentStoreOp             stencilStoreOp;
    VkImageLayout                   initialLayout;
    VkImageLayout                   finalLayout;
} VkAttachmentDescription;

typedef struct VkAttachmentReference {
    uint32_t         attachment;
    VkImageLayout    layout;
} VkAttachmentReference;

typedef struct VkSubpassDescription {
    VkSubpassDescriptionFlags       flags;
    VkPipelineBindPoint             pipelineBindPoint;
    uint32_t                        inputAttachmentCount;
    const VkAttachmentReference*    pInputAttachments;
    uint32_t                        colorAttachmentCount;
    const VkAttachmentReference*    pColorAttachments;
    const VkAttachmentReference*    pResolveAttachments;
    const VkAttachmentReference*    pDepthStencilAttachment;
    uint32_t                        preserveAttachmentCount;
    const uint32_t*                 pPreserveAttachments;
} VkSubpassDescription;

typedef struct VkSubpassDependency {
    uint32_t                srcSubpass;
    uint32_t                dstSubpass;
    VkPipelineStageFlags    srcStageMask;
    VkPipelineStageFlags    dstStageMask;
    VkAccessFlags           srcAccessMask;
    VkAccessFlags           dstAccessMask;
    VkDependencyFlags       dependencyFlags;
} VkSubpassDependency;

typedef struct VkRenderPassCreateInfo {
    VkStructureType                   sType;
    const void*                       pNext;
    VkRenderPassCreateFlags           flags;
    uint32_t                          attachmentCount;
    const VkAttachmentDescription*    pAttachments;
    uint32_t                          subpassCount;
    const VkSubpassDescription*       pSubpasses;
    uint32_t                          dependencyCount;
    const VkSubpassDependency*        pDependencies;
} VkRenderPassCreateInfo;

typedef struct VkCommandPoolCreateInfo {
    VkStructureType             sType;
    const void*                 pNext;
    VkCommandPoolCreateFlags    flags;
    uint32_t                    queueFamilyIndex;
} VkCommandPoolCreateInfo;

typedef struct VkCommandBufferAllocateInfo {
    VkStructureType         sType;
    const void*             pNext;
    VkCommandPool           commandPool;
    VkCommandBufferLevel    level;
    uint32_t                commandBufferCount;
} VkCommandBufferAllocateInfo;

typedef struct VkCommandBufferInheritanceInfo {
    VkStructureType                  sType;
    const void*                      pNext;
    VkRenderPass                     renderPass;
    uint32_t                         subpass;
    VkFramebuffer                    framebuffer;
    VkBool32                         occlusionQueryEnable;
    VkQueryControlFlags              queryFlags;
    VkQueryPipelineStatisticFlags    pipelineStatistics;
} VkCommandBufferInheritanceInfo;

typedef struct VkCommandBufferBeginInfo {
    VkStructureType                          sType;
    const void*                              pNext;
    VkCommandBufferUsageFlags                flags;
    const VkCommandBufferInheritanceInfo*    pInheritanceInfo;
} VkCommandBufferBeginInfo;

typedef struct VkBufferCopy {
    VkDeviceSize    srcOffset;
    VkDeviceSize    dstOffset;
    VkDeviceSize    size;
} VkBufferCopy;

typedef struct VkImageSubresourceLayers {
    VkImageAspectFlags    aspectMask;
    uint32_t              mipLevel;
    uint32_t              baseArrayLayer;
    uint32_t              layerCount;
} VkImageSubresourceLayers;

typedef struct VkImageCopy {
    VkImageSubresourceLayers    srcSubresource;
    VkOffset3D                  srcOffset;
    VkImageSubresourceLayers    dstSubresource;
    VkOffset3D                  dstOffset;
    VkExtent3D                  extent;
} VkImageCopy;

typedef struct VkImageBlit {
    VkImageSubresourceLayers    srcSubresource;
    VkOffset3D                  srcOffsets[2];
    VkImageSubresourceLayers    dstSubresource;
    VkOffset3D                  dstOffsets[2];
} VkImageBlit;

typedef struct VkBufferImageCopy {
    VkDeviceSize                bufferOffset;
    uint32_t                    bufferRowLength;
    uint32_t                    bufferImageHeight;
    VkImageSubresourceLayers    imageSubresource;
    VkOffset3D                  imageOffset;
    VkExtent3D                  imageExtent;
} VkBufferImageCopy;

typedef union VkClearColorValue {
    float       float32[4];
    int32_t     int32[4];
    uint32_t    uint32[4];
} VkClearColorValue;

typedef struct VkClearDepthStencilValue {
    float       depth;
    uint32_t    stencil;
} VkClearDepthStencilValue;

typedef union VkClearValue {
    VkClearColorValue           color;
    VkClearDepthStencilValue    depthStencil;
} VkClearValue;

typedef struct VkClearAttachment {
    VkImageAspectFlags    aspectMask;
    uint32_t              colorAttachment;
    VkClearValue          clearValue;
} VkClearAttachment;

typedef struct VkClearRect {
    VkRect2D    rect;
    uint32_t    baseArrayLayer;
    uint32_t    layerCount;
} VkClearRect;

typedef struct VkImageResolve {
    VkImageSubresourceLayers    srcSubresource;
    VkOffset3D                  srcOffset;
    VkImageSubresourceLayers    dstSubresource;
    VkOffset3D                  dstOffset;
    VkExtent3D                  extent;
} VkImageResolve;

typedef struct VkMemoryBarrier {
    VkStructureType    sType;
    const void*        pNext;
    VkAccessFlags      srcAccessMask;
    VkAccessFlags      dstAccessMask;
} VkMemoryBarrier;

typedef struct VkBufferMemoryBarrier {
    VkStructureType    sType;
    const void*        pNext;
    VkAccessFlags      srcAccessMask;
    VkAccessFlags      dstAccessMask;
    uint32_t           srcQueueFamilyIndex;
    uint32_t           dstQueueFamilyIndex;
    VkBuffer           buffer;
    VkDeviceSize       offset;
    VkDeviceSize       size;
} VkBufferMemoryBarrier;

typedef struct VkImageMemoryBarrier {
    VkStructureType            sType;
    const void*                pNext;
    VkAccessFlags              srcAccessMask;
    VkAccessFlags              dstAccessMask;
    VkImageLayout              oldLayout;
    VkImageLayout              newLayout;
    uint32_t                   srcQueueFamilyIndex;
    uint32_t                   dstQueueFamilyIndex;
    VkImage                    image;
    VkImageSubresourceRange    subresourceRange;
} VkImageMemoryBarrier;

typedef struct VkRenderPassBeginInfo {
    VkStructureType        sType;
    const void*            pNext;
    VkRenderPass           renderPass;
    VkFramebuffer          framebuffer;
    VkRect2D               renderArea;
    uint32_t               clearValueCount;
    const VkClearValue*    pClearValues;
} VkRenderPassBeginInfo;

typedef struct VkDispatchIndirectCommand {
    uint32_t    x;
    uint32_t    y;
    uint32_t    z;
} VkDispatchIndirectCommand;

typedef struct VkDrawIndexedIndirectCommand {
    uint32_t    indexCount;
    uint32_t    instanceCount;
    uint32_t    firstIndex;
    int32_t     vertexOffset;
    uint32_t    firstInstance;
} VkDrawIndexedIndirectCommand;

typedef struct VkDrawIndirectCommand {
    uint32_t    vertexCount;
    uint32_t    instanceCount;
    uint32_t    firstVertex;
    uint32_t    firstInstance;
} VkDrawIndirectCommand;


typedef VkResult (VKAPI_PTR *PFN_vkCreateInstance)(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance);
typedef void (VKAPI_PTR *PFN_vkDestroyInstance)(VkInstance instance, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkEnumeratePhysicalDevices)(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);
typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetInstanceProcAddr)(VkInstance instance, const char* pName);
typedef PFN_vkVoidFunction (VKAPI_PTR *PFN_vkGetDeviceProcAddr)(VkDevice device, const char* pName);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDevice)(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice);
typedef void (VKAPI_PTR *PFN_vkDestroyDevice)(VkDevice device, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceExtensionProperties)(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkEnumerateDeviceExtensionProperties)(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkEnumerateInstanceLayerProperties)(uint32_t* pPropertyCount, VkLayerProperties* pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkEnumerateDeviceLayerProperties)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties);
typedef void (VKAPI_PTR *PFN_vkGetDeviceQueue)(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue);
typedef VkResult (VKAPI_PTR *PFN_vkQueueSubmit)(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence);
typedef VkResult (VKAPI_PTR *PFN_vkQueueWaitIdle)(VkQueue queue);
typedef VkResult (VKAPI_PTR *PFN_vkDeviceWaitIdle)(VkDevice device);
typedef VkResult (VKAPI_PTR *PFN_vkAllocateMemory)(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory);
typedef void (VKAPI_PTR *PFN_vkFreeMemory)(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkMapMemory)(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);
typedef void (VKAPI_PTR *PFN_vkUnmapMemory)(VkDevice device, VkDeviceMemory memory);
typedef VkResult (VKAPI_PTR *PFN_vkFlushMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);
typedef VkResult (VKAPI_PTR *PFN_vkInvalidateMappedMemoryRanges)(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges);
typedef void (VKAPI_PTR *PFN_vkGetDeviceMemoryCommitment)(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes);
typedef VkResult (VKAPI_PTR *PFN_vkBindBufferMemory)(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
typedef VkResult (VKAPI_PTR *PFN_vkBindImageMemory)(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
typedef void (VKAPI_PTR *PFN_vkGetBufferMemoryRequirements)(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetImageMemoryRequirements)(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements)(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkQueueBindSparse)(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence);
typedef VkResult (VKAPI_PTR *PFN_vkCreateFence)(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);
typedef void (VKAPI_PTR *PFN_vkDestroyFence)(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkResetFences)(VkDevice device, uint32_t fenceCount, const VkFence* pFences);
typedef VkResult (VKAPI_PTR *PFN_vkGetFenceStatus)(VkDevice device, VkFence fence);
typedef VkResult (VKAPI_PTR *PFN_vkWaitForFences)(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout);
typedef VkResult (VKAPI_PTR *PFN_vkCreateSemaphore)(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore);
typedef void (VKAPI_PTR *PFN_vkDestroySemaphore)(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateEvent)(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent);
typedef void (VKAPI_PTR *PFN_vkDestroyEvent)(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetEventStatus)(VkDevice device, VkEvent event);
typedef VkResult (VKAPI_PTR *PFN_vkSetEvent)(VkDevice device, VkEvent event);
typedef VkResult (VKAPI_PTR *PFN_vkResetEvent)(VkDevice device, VkEvent event);
typedef VkResult (VKAPI_PTR *PFN_vkCreateQueryPool)(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool);
typedef void (VKAPI_PTR *PFN_vkDestroyQueryPool)(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetQueryPoolResults)(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);
typedef VkResult (VKAPI_PTR *PFN_vkCreateBuffer)(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer);
typedef void (VKAPI_PTR *PFN_vkDestroyBuffer)(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateBufferView)(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView);
typedef void (VKAPI_PTR *PFN_vkDestroyBufferView)(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateImage)(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage);
typedef void (VKAPI_PTR *PFN_vkDestroyImage)(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator);
typedef void (VKAPI_PTR *PFN_vkGetImageSubresourceLayout)(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout);
typedef VkResult (VKAPI_PTR *PFN_vkCreateImageView)(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView);
typedef void (VKAPI_PTR *PFN_vkDestroyImageView)(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateShaderModule)(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule);
typedef void (VKAPI_PTR *PFN_vkDestroyShaderModule)(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineCache)(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache);
typedef void (VKAPI_PTR *PFN_vkDestroyPipelineCache)(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetPipelineCacheData)(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData);
typedef VkResult (VKAPI_PTR *PFN_vkMergePipelineCaches)(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches);
typedef VkResult (VKAPI_PTR *PFN_vkCreateGraphicsPipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
typedef VkResult (VKAPI_PTR *PFN_vkCreateComputePipelines)(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines);
typedef void (VKAPI_PTR *PFN_vkDestroyPipeline)(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreatePipelineLayout)(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout);
typedef void (VKAPI_PTR *PFN_vkDestroyPipelineLayout)(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateSampler)(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler);
typedef void (VKAPI_PTR *PFN_vkDestroySampler)(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorSetLayout)(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout);
typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorSetLayout)(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorPool)(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool);
typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkResetDescriptorPool)(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
typedef VkResult (VKAPI_PTR *PFN_vkAllocateDescriptorSets)(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets);
typedef VkResult (VKAPI_PTR *PFN_vkFreeDescriptorSets)(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets);
typedef void (VKAPI_PTR *PFN_vkUpdateDescriptorSets)(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies);
typedef VkResult (VKAPI_PTR *PFN_vkCreateFramebuffer)(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer);
typedef void (VKAPI_PTR *PFN_vkDestroyFramebuffer)(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateRenderPass)(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass);
typedef void (VKAPI_PTR *PFN_vkDestroyRenderPass)(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator);
typedef void (VKAPI_PTR *PFN_vkGetRenderAreaGranularity)(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity);
typedef VkResult (VKAPI_PTR *PFN_vkCreateCommandPool)(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool);
typedef void (VKAPI_PTR *PFN_vkDestroyCommandPool)(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkResetCommandPool)(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
typedef VkResult (VKAPI_PTR *PFN_vkAllocateCommandBuffers)(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers);
typedef void (VKAPI_PTR *PFN_vkFreeCommandBuffers)(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers);
typedef VkResult (VKAPI_PTR *PFN_vkBeginCommandBuffer)(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo);
typedef VkResult (VKAPI_PTR *PFN_vkEndCommandBuffer)(VkCommandBuffer commandBuffer);
typedef VkResult (VKAPI_PTR *PFN_vkResetCommandBuffer)(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
typedef void (VKAPI_PTR *PFN_vkCmdBindPipeline)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
typedef void (VKAPI_PTR *PFN_vkCmdSetViewport)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports);
typedef void (VKAPI_PTR *PFN_vkCmdSetScissor)(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors);
typedef void (VKAPI_PTR *PFN_vkCmdSetLineWidth)(VkCommandBuffer commandBuffer, float lineWidth);
typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBias)(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
typedef void (VKAPI_PTR *PFN_vkCmdSetBlendConstants)(VkCommandBuffer commandBuffer, const float blendConstants[4]);
typedef void (VKAPI_PTR *PFN_vkCmdSetDepthBounds)(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
typedef void (VKAPI_PTR *PFN_vkCmdSetStencilCompareMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
typedef void (VKAPI_PTR *PFN_vkCmdSetStencilWriteMask)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
typedef void (VKAPI_PTR *PFN_vkCmdSetStencilReference)(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
typedef void (VKAPI_PTR *PFN_vkCmdBindDescriptorSets)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets);
typedef void (VKAPI_PTR *PFN_vkCmdBindIndexBuffer)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
typedef void (VKAPI_PTR *PFN_vkCmdBindVertexBuffers)(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets);
typedef void (VKAPI_PTR *PFN_vkCmdDraw)(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexed)(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexedIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDispatch)(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef void (VKAPI_PTR *PFN_vkCmdDispatchIndirect)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
typedef void (VKAPI_PTR *PFN_vkCmdCopyBuffer)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdCopyImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdBlitImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter);
typedef void (VKAPI_PTR *PFN_vkCmdCopyBufferToImage)(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdCopyImageToBuffer)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdUpdateBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData);
typedef void (VKAPI_PTR *PFN_vkCmdFillBuffer)(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
typedef void (VKAPI_PTR *PFN_vkCmdClearColorImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges);
typedef void (VKAPI_PTR *PFN_vkCmdClearDepthStencilImage)(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges);
typedef void (VKAPI_PTR *PFN_vkCmdClearAttachments)(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects);
typedef void (VKAPI_PTR *PFN_vkCmdResolveImage)(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions);
typedef void (VKAPI_PTR *PFN_vkCmdSetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
typedef void (VKAPI_PTR *PFN_vkCmdResetEvent)(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
typedef void (VKAPI_PTR *PFN_vkCmdWaitEvents)(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);
typedef void (VKAPI_PTR *PFN_vkCmdPipelineBarrier)(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers);
typedef void (VKAPI_PTR *PFN_vkCmdBeginQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
typedef void (VKAPI_PTR *PFN_vkCmdEndQuery)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query);
typedef void (VKAPI_PTR *PFN_vkCmdResetQueryPool)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
typedef void (VKAPI_PTR *PFN_vkCmdWriteTimestamp)(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint32_t query);
typedef void (VKAPI_PTR *PFN_vkCmdCopyQueryPoolResults)(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
typedef void (VKAPI_PTR *PFN_vkCmdPushConstants)(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues);
typedef void (VKAPI_PTR *PFN_vkCmdBeginRenderPass)(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents);
typedef void (VKAPI_PTR *PFN_vkCmdNextSubpass)(VkCommandBuffer commandBuffer, VkSubpassContents contents);
typedef void (VKAPI_PTR *PFN_vkCmdEndRenderPass)(VkCommandBuffer commandBuffer);
typedef void (VKAPI_PTR *PFN_vkCmdExecuteCommands)(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers);


#define VK_KHR_surface 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSurfaceKHR)

#define VK_KHR_SURFACE_SPEC_VERSION       25
#define VK_KHR_SURFACE_EXTENSION_NAME     "VK_KHR_surface"
#define VK_COLORSPACE_SRGB_NONLINEAR_KHR  VK_COLOR_SPACE_SRGB_NONLINEAR_KHR


typedef enum class VkColorSpaceKHR {
    e_SRGB_NONLINEAR_KHR = 0,
    e_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    e_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    e_DCI_P3_LINEAR_EXT = 1000104003,
    e_DCI_P3_NONLINEAR_EXT = 1000104004,
    e_BT709_LINEAR_EXT = 1000104005,
    e_BT709_NONLINEAR_EXT = 1000104006,
    e_BT2020_LINEAR_EXT = 1000104007,
    e_HDR10_ST2084_EXT = 1000104008,
    e_DOLBYVISION_EXT = 1000104009,
    e_HDR10_HLG_EXT = 1000104010,
    e_ADOBERGB_LINEAR_EXT = 1000104011,
    e_ADOBERGB_NONLINEAR_EXT = 1000104012,
    e_PASS_THROUGH_EXT = 1000104013,
    e_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    e_BEGIN_RANGE_KHR = e_SRGB_NONLINEAR_KHR,
    e_END_RANGE_KHR = e_SRGB_NONLINEAR_KHR,
    e_RANGE_SIZE_KHR = (e_SRGB_NONLINEAR_KHR - e_SRGB_NONLINEAR_KHR + 1),
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkColorSpaceKHR;

typedef enum class VkPresentModeKHR {
    e_IMMEDIATE_KHR = 0,
    e_MAILBOX_KHR = 1,
    e_FIFO_KHR = 2,
    e_FIFO_RELAXED_KHR = 3,
    e_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    e_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    e_BEGIN_RANGE_KHR = e_IMMEDIATE_KHR,
    e_END_RANGE_KHR = e_FIFO_RELAXED_KHR,
    e_RANGE_SIZE_KHR = (e_FIFO_RELAXED_KHR - e_IMMEDIATE_KHR + 1),
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkPresentModeKHR;


typedef enum class VkSurfaceTransformFlagsKHR {
    e_IDENTITY_BIT_KHR = 0x00000001,
    e_ROTATE_90_BIT_KHR = 0x00000002,
    e_ROTATE_180_BIT_KHR = 0x00000004,
    e_ROTATE_270_BIT_KHR = 0x00000008,
    e_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
    e_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
    e_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
    e_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
    e_INHERIT_BIT_KHR = 0x00000100,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSurfaceTransformFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkSurfaceTransformFlagsKHR)

typedef enum class VkCompositeAlphaFlagsKHR {
    e_OPAQUE_BIT_KHR = 0x00000001,
    e_PRE_MULTIPLIED_BIT_KHR = 0x00000002,
    e_POST_MULTIPLIED_BIT_KHR = 0x00000004,
    e_INHERIT_BIT_KHR = 0x00000008,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkCompositeAlphaFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkCompositeAlphaFlagsKHR)

typedef struct VkSurfaceCapabilitiesKHR {
    uint32_t                         minImageCount;
    uint32_t                         maxImageCount;
    VkExtent2D                       currentExtent;
    VkExtent2D                       minImageExtent;
    VkExtent2D                       maxImageExtent;
    uint32_t                         maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR       supportedTransforms;
    VkSurfaceTransformFlagsKHR    currentTransform;
    VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;
    VkImageUsageFlags                supportedUsageFlags;
} VkSurfaceCapabilitiesKHR;

typedef struct VkSurfaceFormatKHR {
    VkFormat           format;
    VkColorSpaceKHR    colorSpace;
} VkSurfaceFormatKHR;


typedef void (VKAPI_PTR *PFN_vkDestroySurfaceKHR)(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes);


#define VK_KHR_swapchain 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkSwapchainKHR)

#define VK_KHR_SWAPCHAIN_SPEC_VERSION     68
#define VK_KHR_SWAPCHAIN_EXTENSION_NAME   "VK_KHR_swapchain"


typedef enum class VkSwapchainCreateFlagsKHR {
    e_BIND_SFR_BIT_KHX = 0x00000001,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSwapchainCreateFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkSwapchainCreateFlagsKHR)

typedef struct VkSwapchainCreateInfoKHR {
    VkStructureType                  sType;
    const void*                      pNext;
    VkSwapchainCreateFlagsKHR        flags;
    VkSurfaceKHR                     surface;
    uint32_t                         minImageCount;
    VkFormat                         imageFormat;
    VkColorSpaceKHR                  imageColorSpace;
    VkExtent2D                       imageExtent;
    uint32_t                         imageArrayLayers;
    VkImageUsageFlags                imageUsage;
    VkSharingMode                    imageSharingMode;
    uint32_t                         queueFamilyIndexCount;
    const uint32_t*                  pQueueFamilyIndices;
    VkSurfaceTransformFlagsKHR    preTransform;
    VkCompositeAlphaFlagsKHR      compositeAlpha;
    VkPresentModeKHR                 presentMode;
    VkBool32                         clipped;
    VkSwapchainKHR                   oldSwapchain;
} VkSwapchainCreateInfoKHR;

typedef struct VkPresentInfoKHR {
    VkStructureType          sType;
    const void*              pNext;
    uint32_t                 waitSemaphoreCount;
    const VkSemaphore*       pWaitSemaphores;
    uint32_t                 swapchainCount;
    const VkSwapchainKHR*    pSwapchains;
    const uint32_t*          pImageIndices;
    VkResult*                pResults;
} VkPresentInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateSwapchainKHR)(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain);
typedef void (VKAPI_PTR *PFN_vkDestroySwapchainKHR)(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkGetSwapchainImagesKHR)(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages);
typedef VkResult (VKAPI_PTR *PFN_vkAcquireNextImageKHR)(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex);
typedef VkResult (VKAPI_PTR *PFN_vkQueuePresentKHR)(VkQueue queue, const VkPresentInfoKHR* pPresentInfo);


#define VK_KHR_display 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayKHR)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDisplayModeKHR)

#define VK_KHR_DISPLAY_SPEC_VERSION       21
#define VK_KHR_DISPLAY_EXTENSION_NAME     "VK_KHR_display"


typedef enum class VkDisplayPlaneAlphaFlagsKHR {
    e_OPAQUE_BIT_KHR = 0x00000001,
    e_GLOBAL_BIT_KHR = 0x00000002,
    e_PER_PIXEL_BIT_KHR = 0x00000004,
    e_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDisplayPlaneAlphaFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkDisplayPlaneAlphaFlagsKHR)
typedef VkFlags VkDisplayModeCreateFlagsKHR;
typedef VkFlags VkDisplaySurfaceCreateFlagsKHR;

typedef struct VkDisplayPropertiesKHR {
    VkDisplayKHR                  display;
    const char*                   displayName;
    VkExtent2D                    physicalDimensions;
    VkExtent2D                    physicalResolution;
    VkSurfaceTransformFlagsKHR    supportedTransforms;
    VkBool32                      planeReorderPossible;
    VkBool32                      persistentContent;
} VkDisplayPropertiesKHR;

typedef struct VkDisplayModeParametersKHR {
    VkExtent2D    visibleRegion;
    uint32_t      refreshRate;
} VkDisplayModeParametersKHR;

typedef struct VkDisplayModePropertiesKHR {
    VkDisplayModeKHR              displayMode;
    VkDisplayModeParametersKHR    parameters;
} VkDisplayModePropertiesKHR;

typedef struct VkDisplayModeCreateInfoKHR {
    VkStructureType                sType;
    const void*                    pNext;
    VkDisplayModeCreateFlagsKHR    flags;
    VkDisplayModeParametersKHR     parameters;
} VkDisplayModeCreateInfoKHR;

typedef struct VkDisplayPlaneCapabilitiesKHR {
    VkDisplayPlaneAlphaFlagsKHR    supportedAlpha;
    VkOffset2D                     minSrcPosition;
    VkOffset2D                     maxSrcPosition;
    VkExtent2D                     minSrcExtent;
    VkExtent2D                     maxSrcExtent;
    VkOffset2D                     minDstPosition;
    VkOffset2D                     maxDstPosition;
    VkExtent2D                     minDstExtent;
    VkExtent2D                     maxDstExtent;
} VkDisplayPlaneCapabilitiesKHR;

typedef struct VkDisplayPlanePropertiesKHR {
    VkDisplayKHR    currentDisplay;
    uint32_t        currentStackIndex;
} VkDisplayPlanePropertiesKHR;

typedef struct VkDisplaySurfaceCreateInfoKHR {
    VkStructureType                   sType;
    const void*                       pNext;
    VkDisplaySurfaceCreateFlagsKHR    flags;
    VkDisplayModeKHR                  displayMode;
    uint32_t                          planeIndex;
    uint32_t                          planeStackIndex;
    VkSurfaceTransformFlagsKHR     transform;
    float                             globalAlpha;
    VkDisplayPlaneAlphaFlagsKHR    alphaMode;
    VkExtent2D                        imageExtent;
} VkDisplaySurfaceCreateInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneSupportedDisplaysKHR)(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays);
typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayModePropertiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDisplayModeKHR)(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode);
typedef VkResult (VKAPI_PTR *PFN_vkGetDisplayPlaneCapabilitiesKHR)(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities);
typedef VkResult (VKAPI_PTR *PFN_vkCreateDisplayPlaneSurfaceKHR)(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);


#define VK_KHR_display_swapchain 1
#define VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION 9
#define VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME "VK_KHR_display_swapchain"

typedef struct VkDisplayPresentInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    VkRect2D           srcRect;
    VkRect2D           dstRect;
    VkBool32           persistent;
} VkDisplayPresentInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateSharedSwapchainsKHR)(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains);


#ifdef VK_USE_PLATFORM_XLIB_KHR
#define VK_KHR_xlib_surface 1
#include <X11/Xlib.h>

#define VK_KHR_XLIB_SURFACE_SPEC_VERSION  6
#define VK_KHR_XLIB_SURFACE_EXTENSION_NAME "VK_KHR_xlib_surface"

typedef VkFlags VkXlibSurfaceCreateFlagsKHR;

typedef struct VkXlibSurfaceCreateInfoKHR {
    VkStructureType                sType;
    const void*                    pNext;
    VkXlibSurfaceCreateFlagsKHR    flags;
    Display*                       dpy;
    Window                         window;
} VkXlibSurfaceCreateInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateXlibSurfaceKHR)(VkInstance instance, const VkXlibSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID);

#endif /* VK_USE_PLATFORM_XLIB_KHR */

#ifdef VK_USE_PLATFORM_XCB_KHR
#define VK_KHR_xcb_surface 1
#include <xcb/xcb.h>

#define VK_KHR_XCB_SURFACE_SPEC_VERSION   6
#define VK_KHR_XCB_SURFACE_EXTENSION_NAME "VK_KHR_xcb_surface"

typedef VkFlags VkXcbSurfaceCreateFlagsKHR;

typedef struct VkXcbSurfaceCreateInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    VkXcbSurfaceCreateFlagsKHR    flags;
    xcb_connection_t*             connection;
    xcb_window_t                  window;
} VkXcbSurfaceCreateInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateXcbSurfaceKHR)(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id);

#endif /* VK_USE_PLATFORM_XCB_KHR */

#ifdef VK_USE_PLATFORM_WAYLAND_KHR
#define VK_KHR_wayland_surface 1
#include <wayland-client.h>

#define VK_KHR_WAYLAND_SURFACE_SPEC_VERSION 6
#define VK_KHR_WAYLAND_SURFACE_EXTENSION_NAME "VK_KHR_wayland_surface"

typedef VkFlags VkWaylandSurfaceCreateFlagsKHR;

typedef struct VkWaylandSurfaceCreateInfoKHR {
    VkStructureType                   sType;
    const void*                       pNext;
    VkWaylandSurfaceCreateFlagsKHR    flags;
    struct wl_display*                display;
    struct wl_surface*                surface;
} VkWaylandSurfaceCreateInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateWaylandSurfaceKHR)(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display);

#endif /* VK_USE_PLATFORM_WAYLAND_KHR */

#ifdef VK_USE_PLATFORM_MIR_KHR
#define VK_KHR_mir_surface 1
#include <mir_toolkit/client_types.h>

#define VK_KHR_MIR_SURFACE_SPEC_VERSION   4
#define VK_KHR_MIR_SURFACE_EXTENSION_NAME "VK_KHR_mir_surface"

typedef VkFlags VkMirSurfaceCreateFlagsKHR;

typedef struct VkMirSurfaceCreateInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    VkMirSurfaceCreateFlagsKHR    flags;
    MirConnection*                connection;
    MirSurface*                   mirSurface;
} VkMirSurfaceCreateInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateMirSurfaceKHR)(VkInstance instance, const VkMirSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceMirPresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, MirConnection* connection);

#endif /* VK_USE_PLATFORM_MIR_KHR */

#ifdef VK_USE_PLATFORM_ANDROID_KHR
#define VK_KHR_android_surface 1
#include <android/native_window.h>

#define VK_KHR_ANDROID_SURFACE_SPEC_VERSION 6
#define VK_KHR_ANDROID_SURFACE_EXTENSION_NAME "VK_KHR_android_surface"

typedef VkFlags VkAndroidSurfaceCreateFlagsKHR;

typedef struct VkAndroidSurfaceCreateInfoKHR {
    VkStructureType                   sType;
    const void*                       pNext;
    VkAndroidSurfaceCreateFlagsKHR    flags;
    ANativeWindow*                    window;
} VkAndroidSurfaceCreateInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateAndroidSurfaceKHR)(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);

#endif /* VK_USE_PLATFORM_ANDROID_KHR */

#ifdef VK_USE_PLATFORM_WIN32_KHR
#define VK_KHR_win32_surface 1
#include <windows.h>

#define VK_KHR_WIN32_SURFACE_SPEC_VERSION 6
#define VK_KHR_WIN32_SURFACE_EXTENSION_NAME "VK_KHR_win32_surface"

typedef VkFlags VkWin32SurfaceCreateFlagsKHR;

typedef struct VkWin32SurfaceCreateInfoKHR {
    VkStructureType                 sType;
    const void*                     pNext;
    VkWin32SurfaceCreateFlagsKHR    flags;
    HINSTANCE                       hinstance;
    HWND                            hwnd;
} VkWin32SurfaceCreateInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateWin32SurfaceKHR)(VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);
typedef VkBool32 (VKAPI_PTR *PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex);

#endif /* VK_USE_PLATFORM_WIN32_KHR */

#define VK_KHR_sampler_mirror_clamp_to_edge 1
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION 1
#define VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME "VK_KHR_sampler_mirror_clamp_to_edge"


#define VK_KHR_get_physical_device_properties2 1
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION 1
#define VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME "VK_KHR_get_physical_device_properties2"

typedef struct VkPhysicalDeviceFeatures2KHR {
    VkStructureType             sType;
    void*                       pNext;
    VkPhysicalDeviceFeatures    features;
} VkPhysicalDeviceFeatures2KHR;

typedef struct VkPhysicalDeviceProperties2KHR {
    VkStructureType               sType;
    void*                         pNext;
    VkPhysicalDeviceProperties    properties;
} VkPhysicalDeviceProperties2KHR;

typedef struct VkFormatProperties2KHR {
    VkStructureType       sType;
    void*                 pNext;
    VkFormatProperties    formatProperties;
} VkFormatProperties2KHR;

typedef struct VkImageFormatProperties2KHR {
    VkStructureType            sType;
    void*                      pNext;
    VkImageFormatProperties    imageFormatProperties;
} VkImageFormatProperties2KHR;

typedef struct VkPhysicalDeviceImageFormatInfo2KHR {
    VkStructureType       sType;
    const void*           pNext;
    VkFormat              format;
    VkImageType           type;
    VkImageTiling         tiling;
    VkImageUsageFlags     usage;
    VkImageCreateFlags    flags;
} VkPhysicalDeviceImageFormatInfo2KHR;

typedef struct VkQueueFamilyProperties2KHR {
    VkStructureType            sType;
    void*                      pNext;
    VkQueueFamilyProperties    queueFamilyProperties;
} VkQueueFamilyProperties2KHR;

typedef struct VkPhysicalDeviceMemoryProperties2KHR {
    VkStructureType                     sType;
    void*                               pNext;
    VkPhysicalDeviceMemoryProperties    memoryProperties;
} VkPhysicalDeviceMemoryProperties2KHR;

typedef struct VkSparseImageFormatProperties2KHR {
    VkStructureType                  sType;
    void*                            pNext;
    VkSparseImageFormatProperties    properties;
} VkSparseImageFormatProperties2KHR;

typedef struct VkPhysicalDeviceSparseImageFormatInfo2KHR {
    VkStructureType          sType;
    const void*              pNext;
    VkFormat                 format;
    VkImageType              type;
    VkSampleCountFlags    samples;
    VkImageUsageFlags        usage;
    VkImageTiling            tiling;
} VkPhysicalDeviceSparseImageFormatInfo2KHR;


typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFeatures2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2KHR* pFeatures);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2KHR* pProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceFormatProperties2KHR)(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2KHR* pFormatProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2KHR* pImageFormatInfo, VkImageFormatProperties2KHR* pImageFormatProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2KHR* pQueueFamilyProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceMemoryProperties2KHR)(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2KHR* pMemoryProperties);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2KHR* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2KHR* pProperties);


#define VK_KHR_shader_draw_parameters 1
#define VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION 1
#define VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME "VK_KHR_shader_draw_parameters"


#define VK_KHR_maintenance1 1
#define VK_KHR_MAINTENANCE1_SPEC_VERSION  1
#define VK_KHR_MAINTENANCE1_EXTENSION_NAME "VK_KHR_maintenance1"

typedef VkFlags VkCommandPoolTrimFlagsKHR;

typedef void (VKAPI_PTR *PFN_vkTrimCommandPoolKHR)(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlagsKHR flags);


#define VK_KHR_external_memory_capabilities 1
#define VK_LUID_SIZE_KHR                  8
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_memory_capabilities"


typedef enum class VkExternalMemoryHandleTypeFlagsKHR {
    e_OPAQUE_FD_BIT_KHR = 0x00000001,
    e_OPAQUE_WIN32_BIT_KHR = 0x00000002,
    e_OPAQUE_WIN32_KMT_BIT_KHR = 0x00000004,
    e_D3D11_TEXTURE_BIT_KHR = 0x00000008,
    e_D3D11_TEXTURE_KMT_BIT_KHR = 0x00000010,
    e_D3D12_HEAP_BIT_KHR = 0x00000020,
    e_D3D12_RESOURCE_BIT_KHR = 0x00000040,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkExternalMemoryHandleTypeFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkExternalMemoryHandleTypeFlagsKHR)

typedef enum class VkExternalMemoryFeatureFlagsKHR {
    e_DEDICATED_ONLY_BIT_KHR = 0x00000001,
    e_EXPORTABLE_BIT_KHR = 0x00000002,
    e_IMPORTABLE_BIT_KHR = 0x00000004,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkExternalMemoryFeatureFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkExternalMemoryFeatureFlagsKHR)

typedef struct VkExternalMemoryPropertiesKHR {
    VkExternalMemoryFeatureFlagsKHR       externalMemoryFeatures;
    VkExternalMemoryHandleTypeFlagsKHR    exportFromImportedHandleTypes;
    VkExternalMemoryHandleTypeFlagsKHR    compatibleHandleTypes;
} VkExternalMemoryPropertiesKHR;

typedef struct VkPhysicalDeviceExternalImageFormatInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkExternalMemoryHandleTypeFlagsKHR    handleType;
} VkPhysicalDeviceExternalImageFormatInfoKHR;

typedef struct VkExternalImageFormatPropertiesKHR {
    VkStructureType                  sType;
    void*                            pNext;
    VkExternalMemoryPropertiesKHR    externalMemoryProperties;
} VkExternalImageFormatPropertiesKHR;

typedef struct VkPhysicalDeviceExternalBufferInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkBufferCreateFlags                      flags;
    VkBufferUsageFlags                       usage;
    VkExternalMemoryHandleTypeFlagsKHR    handleType;
} VkPhysicalDeviceExternalBufferInfoKHR;

typedef struct VkExternalBufferPropertiesKHR {
    VkStructureType                  sType;
    void*                            pNext;
    VkExternalMemoryPropertiesKHR    externalMemoryProperties;
} VkExternalBufferPropertiesKHR;

typedef struct VkPhysicalDeviceIDPropertiesKHR {
    VkStructureType    sType;
    void*              pNext;
    uint8_t            deviceUUID[VK_UUID_SIZE];
    uint8_t            driverUUID[VK_UUID_SIZE];
    uint8_t            deviceLUID[VK_LUID_SIZE_KHR];
    uint32_t           deviceNodeMask;
    VkBool32           deviceLUIDValid;
} VkPhysicalDeviceIDPropertiesKHR;


typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfoKHR* pExternalBufferInfo, VkExternalBufferPropertiesKHR* pExternalBufferProperties);


#define VK_KHR_external_memory 1
#define VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME "VK_KHR_external_memory"
#define VK_QUEUE_FAMILY_EXTERNAL_KHR      (~0U-1)

typedef struct VkExternalMemoryImageCreateInfoKHR {
    VkStructureType                       sType;
    const void*                           pNext;
    VkExternalMemoryHandleTypeFlagsKHR    handleTypes;
} VkExternalMemoryImageCreateInfoKHR;

typedef struct VkExternalMemoryBufferCreateInfoKHR {
    VkStructureType                       sType;
    const void*                           pNext;
    VkExternalMemoryHandleTypeFlagsKHR    handleTypes;
} VkExternalMemoryBufferCreateInfoKHR;

typedef struct VkExportMemoryAllocateInfoKHR {
    VkStructureType                       sType;
    const void*                           pNext;
    VkExternalMemoryHandleTypeFlagsKHR    handleTypes;
} VkExportMemoryAllocateInfoKHR;



#ifdef VK_USE_PLATFORM_WIN32_KHR
#define VK_KHR_external_memory_win32 1
#define VK_KHR_EXTERNAL_MEMORY_WIN32_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME "VK_KHR_external_memory_win32"

typedef struct VkImportMemoryWin32HandleInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkExternalMemoryHandleTypeFlagsKHR    handleType;
    HANDLE                                   handle;
    LPCWSTR                                  name;
} VkImportMemoryWin32HandleInfoKHR;

typedef struct VkExportMemoryWin32HandleInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    const SECURITY_ATTRIBUTES*    pAttributes;
    DWORD                         dwAccess;
    LPCWSTR                       name;
} VkExportMemoryWin32HandleInfoKHR;

typedef struct VkMemoryWin32HandlePropertiesKHR {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           memoryTypeBits;
} VkMemoryWin32HandlePropertiesKHR;

typedef struct VkMemoryGetWin32HandleInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkDeviceMemory                           memory;
    VkExternalMemoryHandleTypeFlagsKHR    handleType;
} VkMemoryGetWin32HandleInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkGetMemoryWin32HandleKHR)(VkDevice device, const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle);
typedef VkResult (VKAPI_PTR *PFN_vkGetMemoryWin32HandlePropertiesKHR)(VkDevice device, VkExternalMemoryHandleTypeFlagsKHR handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties);

#endif /* VK_USE_PLATFORM_WIN32_KHR */

#define VK_KHR_external_memory_fd 1
#define VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME "VK_KHR_external_memory_fd"

typedef struct VkImportMemoryFdInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkExternalMemoryHandleTypeFlagsKHR    handleType;
    int                                      fd;
} VkImportMemoryFdInfoKHR;

typedef struct VkMemoryFdPropertiesKHR {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           memoryTypeBits;
} VkMemoryFdPropertiesKHR;

typedef struct VkMemoryGetFdInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkDeviceMemory                           memory;
    VkExternalMemoryHandleTypeFlagsKHR    handleType;
} VkMemoryGetFdInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkGetMemoryFdKHR)(VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd);
typedef VkResult (VKAPI_PTR *PFN_vkGetMemoryFdPropertiesKHR)(VkDevice device, VkExternalMemoryHandleTypeFlagsKHR handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties);


#ifdef VK_USE_PLATFORM_WIN32_KHR
#define VK_KHR_win32_keyed_mutex 1
#define VK_KHR_WIN32_KEYED_MUTEX_SPEC_VERSION 1
#define VK_KHR_WIN32_KEYED_MUTEX_EXTENSION_NAME "VK_KHR_win32_keyed_mutex"

typedef struct VkWin32KeyedMutexAcquireReleaseInfoKHR {
    VkStructureType          sType;
    const void*              pNext;
    uint32_t                 acquireCount;
    const VkDeviceMemory*    pAcquireSyncs;
    const uint64_t*          pAcquireKeys;
    const uint32_t*          pAcquireTimeouts;
    uint32_t                 releaseCount;
    const VkDeviceMemory*    pReleaseSyncs;
    const uint64_t*          pReleaseKeys;
} VkWin32KeyedMutexAcquireReleaseInfoKHR;


#endif /* VK_USE_PLATFORM_WIN32_KHR */

#define VK_KHR_external_semaphore_capabilities 1
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_semaphore_capabilities"


typedef enum class VkExternalSemaphoreHandleTypeFlagsKHR {
    e_OPAQUE_FD_BIT_KHR = 0x00000001,
    e_OPAQUE_WIN32_BIT_KHR = 0x00000002,
    e_OPAQUE_WIN32_KMT_BIT_KHR = 0x00000004,
    e_D3D12_FENCE_BIT_KHR = 0x00000008,
    e_SYNC_FD_BIT_KHR = 0x00000010,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkExternalSemaphoreHandleTypeFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkExternalSemaphoreHandleTypeFlagsKHR)

typedef enum class VkExternalSemaphoreFeatureFlagsKHR {
    e_EXPORTABLE_BIT_KHR = 0x00000001,
    e_IMPORTABLE_BIT_KHR = 0x00000002,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkExternalSemaphoreFeatureFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkExternalSemaphoreFeatureFlagsKHR)

typedef struct VkPhysicalDeviceExternalSemaphoreInfoKHR {
    VkStructureType                             sType;
    const void*                                 pNext;
    VkExternalSemaphoreHandleTypeFlagsKHR    handleType;
} VkPhysicalDeviceExternalSemaphoreInfoKHR;

typedef struct VkExternalSemaphorePropertiesKHR {
    VkStructureType                          sType;
    void*                                    pNext;
    VkExternalSemaphoreHandleTypeFlagsKHR    exportFromImportedHandleTypes;
    VkExternalSemaphoreHandleTypeFlagsKHR    compatibleHandleTypes;
    VkExternalSemaphoreFeatureFlagsKHR       externalSemaphoreFeatures;
} VkExternalSemaphorePropertiesKHR;


typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfoKHR* pExternalSemaphoreInfo, VkExternalSemaphorePropertiesKHR* pExternalSemaphoreProperties);


#define VK_KHR_external_semaphore 1
#define VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME "VK_KHR_external_semaphore"


typedef enum class VkSemaphoreImportFlagsKHR {
    e_TEMPORARY_BIT_KHR = 0x00000001,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkSemaphoreImportFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkSemaphoreImportFlagsKHR)

typedef struct VkExportSemaphoreCreateInfoKHR {
    VkStructureType                          sType;
    const void*                              pNext;
    VkExternalSemaphoreHandleTypeFlagsKHR    handleTypes;
} VkExportSemaphoreCreateInfoKHR;



#ifdef VK_USE_PLATFORM_WIN32_KHR
#define VK_KHR_external_semaphore_win32 1
#define VK_KHR_EXTERNAL_SEMAPHORE_WIN32_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_WIN32_EXTENSION_NAME "VK_KHR_external_semaphore_win32"

typedef struct VkImportSemaphoreWin32HandleInfoKHR {
    VkStructureType                             sType;
    const void*                                 pNext;
    VkSemaphore                                 semaphore;
    VkSemaphoreImportFlagsKHR                   flags;
    VkExternalSemaphoreHandleTypeFlagsKHR    handleType;
    HANDLE                                      handle;
    LPCWSTR                                     name;
} VkImportSemaphoreWin32HandleInfoKHR;

typedef struct VkExportSemaphoreWin32HandleInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    const SECURITY_ATTRIBUTES*    pAttributes;
    DWORD                         dwAccess;
    LPCWSTR                       name;
} VkExportSemaphoreWin32HandleInfoKHR;

typedef struct VkD3D12FenceSubmitInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           waitSemaphoreValuesCount;
    const uint64_t*    pWaitSemaphoreValues;
    uint32_t           signalSemaphoreValuesCount;
    const uint64_t*    pSignalSemaphoreValues;
} VkD3D12FenceSubmitInfoKHR;

typedef struct VkSemaphoreGetWin32HandleInfoKHR {
    VkStructureType                             sType;
    const void*                                 pNext;
    VkSemaphore                                 semaphore;
    VkExternalSemaphoreHandleTypeFlagsKHR    handleType;
} VkSemaphoreGetWin32HandleInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkImportSemaphoreWin32HandleKHR)(VkDevice device, const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);
typedef VkResult (VKAPI_PTR *PFN_vkGetSemaphoreWin32HandleKHR)(VkDevice device, const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle);

#endif /* VK_USE_PLATFORM_WIN32_KHR */

#define VK_KHR_external_semaphore_fd 1
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME "VK_KHR_external_semaphore_fd"

typedef struct VkImportSemaphoreFdInfoKHR {
    VkStructureType                             sType;
    const void*                                 pNext;
    VkSemaphore                                 semaphore;
    VkSemaphoreImportFlagsKHR                   flags;
    VkExternalSemaphoreHandleTypeFlagsKHR    handleType;
    int                                         fd;
} VkImportSemaphoreFdInfoKHR;

typedef struct VkSemaphoreGetFdInfoKHR {
    VkStructureType                             sType;
    const void*                                 pNext;
    VkSemaphore                                 semaphore;
    VkExternalSemaphoreHandleTypeFlagsKHR    handleType;
} VkSemaphoreGetFdInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkImportSemaphoreFdKHR)(VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);
typedef VkResult (VKAPI_PTR *PFN_vkGetSemaphoreFdKHR)(VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd);


#define VK_KHR_push_descriptor 1
#define VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION 1
#define VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME "VK_KHR_push_descriptor"

typedef struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxPushDescriptors;
} VkPhysicalDevicePushDescriptorPropertiesKHR;


typedef void (VKAPI_PTR *PFN_vkCmdPushDescriptorSetKHR)(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites);


#define VK_KHR_16bit_storage 1
#define VK_KHR_16BIT_STORAGE_SPEC_VERSION 1
#define VK_KHR_16BIT_STORAGE_EXTENSION_NAME "VK_KHR_16bit_storage"

typedef struct VkPhysicalDevice16BitStorageFeaturesKHR {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           storageBuffer16BitAccess;
    VkBool32           uniformAndStorageBuffer16BitAccess;
    VkBool32           storagePushConstant16;
    VkBool32           storageInputOutput16;
} VkPhysicalDevice16BitStorageFeaturesKHR;



#define VK_KHR_incremental_present 1
#define VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION 1
#define VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME "VK_KHR_incremental_present"

typedef struct VkRectLayerKHR {
    VkOffset2D    offset;
    VkExtent2D    extent;
    uint32_t      layer;
} VkRectLayerKHR;

typedef struct VkPresentRegionKHR {
    uint32_t                 rectangleCount;
    const VkRectLayerKHR*    pRectangles;
} VkPresentRegionKHR;

typedef struct VkPresentRegionsKHR {
    VkStructureType              sType;
    const void*                  pNext;
    uint32_t                     swapchainCount;
    const VkPresentRegionKHR*    pRegions;
} VkPresentRegionsKHR;



#define VK_KHR_descriptor_update_template 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDescriptorUpdateTemplateKHR)

#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION 1
#define VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME "VK_KHR_descriptor_update_template"


typedef enum class VkDescriptorUpdateTemplateTypeKHR {
    e_DESCRIPTOR_SET_KHR = 0,
    e_PUSH_DESCRIPTORS_KHR = 1,
    e_BEGIN_RANGE_KHR = e_DESCRIPTOR_SET_KHR,
    e_END_RANGE_KHR = e_PUSH_DESCRIPTORS_KHR,
    e_RANGE_SIZE_KHR = (e_PUSH_DESCRIPTORS_KHR - e_DESCRIPTOR_SET_KHR + 1),
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkDescriptorUpdateTemplateTypeKHR;

typedef VkFlags VkDescriptorUpdateTemplateCreateFlagsKHR;

typedef struct VkDescriptorUpdateTemplateEntryKHR {
    uint32_t            dstBinding;
    uint32_t            dstArrayElement;
    uint32_t            descriptorCount;
    VkDescriptorType    descriptorType;
    size_t              offset;
    size_t              stride;
} VkDescriptorUpdateTemplateEntryKHR;

typedef struct VkDescriptorUpdateTemplateCreateInfoKHR {
    VkStructureType                              sType;
    void*                                        pNext;
    VkDescriptorUpdateTemplateCreateFlagsKHR     flags;
    uint32_t                                     descriptorUpdateEntryCount;
    const VkDescriptorUpdateTemplateEntryKHR*    pDescriptorUpdateEntries;
    VkDescriptorUpdateTemplateTypeKHR            templateType;
    VkDescriptorSetLayout                        descriptorSetLayout;
    VkPipelineBindPoint                          pipelineBindPoint;
    VkPipelineLayout                             pipelineLayout;
    uint32_t                                     set;
} VkDescriptorUpdateTemplateCreateInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkCreateDescriptorUpdateTemplateKHR)(VkDevice device, const VkDescriptorUpdateTemplateCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplateKHR* pDescriptorUpdateTemplate);
typedef void (VKAPI_PTR *PFN_vkDestroyDescriptorUpdateTemplateKHR)(VkDevice device, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator);
typedef void (VKAPI_PTR *PFN_vkUpdateDescriptorSetWithTemplateKHR)(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const void* pData);
typedef void (VKAPI_PTR *PFN_vkCmdPushDescriptorSetWithTemplateKHR)(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData);


#define VK_KHR_shared_presentable_image 1
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION 1
#define VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME "VK_KHR_shared_presentable_image"

typedef struct VkSharedPresentSurfaceCapabilitiesKHR {
    VkStructureType      sType;
    void*                pNext;
    VkImageUsageFlags    sharedPresentSupportedUsageFlags;
} VkSharedPresentSurfaceCapabilitiesKHR;


typedef VkResult (VKAPI_PTR *PFN_vkGetSwapchainStatusKHR)(VkDevice device, VkSwapchainKHR swapchain);


#define VK_KHR_external_fence_capabilities 1
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME "VK_KHR_external_fence_capabilities"


typedef enum class VkExternalFenceHandleTypeFlagsKHR {
    e_OPAQUE_FD_BIT_KHR = 0x00000001,
    e_OPAQUE_WIN32_BIT_KHR = 0x00000002,
    e_OPAQUE_WIN32_KMT_BIT_KHR = 0x00000004,
    e_SYNC_FD_BIT_KHR = 0x00000008,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkExternalFenceHandleTypeFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkExternalFenceHandleTypeFlagsKHR)

typedef enum class VkExternalFenceFeatureFlagsKHR {
    e_EXPORTABLE_BIT_KHR = 0x00000001,
    e_IMPORTABLE_BIT_KHR = 0x00000002,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkExternalFenceFeatureFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkExternalFenceFeatureFlagsKHR)

typedef struct VkPhysicalDeviceExternalFenceInfoKHR {
    VkStructureType                         sType;
    const void*                             pNext;
    VkExternalFenceHandleTypeFlagsKHR    handleType;
} VkPhysicalDeviceExternalFenceInfoKHR;

typedef struct VkExternalFencePropertiesKHR {
    VkStructureType                      sType;
    void*                                pNext;
    VkExternalFenceHandleTypeFlagsKHR    exportFromImportedHandleTypes;
    VkExternalFenceHandleTypeFlagsKHR    compatibleHandleTypes;
    VkExternalFenceFeatureFlagsKHR       externalFenceFeatures;
} VkExternalFencePropertiesKHR;


typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfoKHR* pExternalFenceInfo, VkExternalFencePropertiesKHR* pExternalFenceProperties);


#define VK_KHR_external_fence 1
#define VK_KHR_EXTERNAL_FENCE_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME "VK_KHR_external_fence"


typedef enum class VkFenceImportFlagsKHR {
    e_TEMPORARY_BIT_KHR = 0x00000001,
    e_MAX_ENUM_KHR = 0x7FFFFFFF
} VkFenceImportFlagsKHR;
DEFINE_ENUM_BITWISE_OPERATORS(VkFenceImportFlagsKHR)

typedef struct VkExportFenceCreateInfoKHR {
    VkStructureType                      sType;
    const void*                          pNext;
    VkExternalFenceHandleTypeFlagsKHR    handleTypes;
} VkExportFenceCreateInfoKHR;



#ifdef VK_USE_PLATFORM_WIN32_KHR
#define VK_KHR_external_fence_win32 1
#define VK_KHR_EXTERNAL_FENCE_WIN32_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_WIN32_EXTENSION_NAME "VK_KHR_external_fence_win32"

typedef struct VkImportFenceWin32HandleInfoKHR {
    VkStructureType                         sType;
    const void*                             pNext;
    VkFence                                 fence;
    VkFenceImportFlagsKHR                   flags;
    VkExternalFenceHandleTypeFlagsKHR    handleType;
    HANDLE                                  handle;
    LPCWSTR                                 name;
} VkImportFenceWin32HandleInfoKHR;

typedef struct VkExportFenceWin32HandleInfoKHR {
    VkStructureType               sType;
    const void*                   pNext;
    const SECURITY_ATTRIBUTES*    pAttributes;
    DWORD                         dwAccess;
    LPCWSTR                       name;
} VkExportFenceWin32HandleInfoKHR;

typedef struct VkFenceGetWin32HandleInfoKHR {
    VkStructureType                         sType;
    const void*                             pNext;
    VkFence                                 fence;
    VkExternalFenceHandleTypeFlagsKHR    handleType;
} VkFenceGetWin32HandleInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkImportFenceWin32HandleKHR)(VkDevice device, const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo);
typedef VkResult (VKAPI_PTR *PFN_vkGetFenceWin32HandleKHR)(VkDevice device, const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle);

#endif /* VK_USE_PLATFORM_WIN32_KHR */

#define VK_KHR_external_fence_fd 1
#define VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION 1
#define VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME "VK_KHR_external_fence_fd"

typedef struct VkImportFenceFdInfoKHR {
    VkStructureType                         sType;
    const void*                             pNext;
    VkFence                                 fence;
    VkFenceImportFlagsKHR                   flags;
    VkExternalFenceHandleTypeFlagsKHR    handleType;
    int                                     fd;
} VkImportFenceFdInfoKHR;

typedef struct VkFenceGetFdInfoKHR {
    VkStructureType                         sType;
    const void*                             pNext;
    VkFence                                 fence;
    VkExternalFenceHandleTypeFlagsKHR    handleType;
} VkFenceGetFdInfoKHR;


typedef VkResult (VKAPI_PTR *PFN_vkImportFenceFdKHR)(VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo);
typedef VkResult (VKAPI_PTR *PFN_vkGetFenceFdKHR)(VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd);


#define VK_KHR_get_surface_capabilities2 1
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION 1
#define VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME "VK_KHR_get_surface_capabilities2"

typedef struct VkPhysicalDeviceSurfaceInfo2KHR {
    VkStructureType    sType;
    const void*        pNext;
    VkSurfaceKHR       surface;
} VkPhysicalDeviceSurfaceInfo2KHR;

typedef struct VkSurfaceCapabilities2KHR {
    VkStructureType             sType;
    void*                       pNext;
    VkSurfaceCapabilitiesKHR    surfaceCapabilities;
} VkSurfaceCapabilities2KHR;

typedef struct VkSurfaceFormat2KHR {
    VkStructureType       sType;
    void*                 pNext;
    VkSurfaceFormatKHR    surfaceFormat;
} VkSurfaceFormat2KHR;


typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats);


#define VK_KHR_variable_pointers 1
#define VK_KHR_VARIABLE_POINTERS_SPEC_VERSION 1
#define VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME "VK_KHR_variable_pointers"

typedef struct VkPhysicalDeviceVariablePointerFeaturesKHR {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           variablePointersStorageBuffer;
    VkBool32           variablePointers;
} VkPhysicalDeviceVariablePointerFeaturesKHR;



#define VK_KHR_dedicated_allocation 1
#define VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION 3
#define VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME "VK_KHR_dedicated_allocation"

typedef struct VkMemoryDedicatedRequirementsKHR {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           prefersDedicatedAllocation;
    VkBool32           requiresDedicatedAllocation;
} VkMemoryDedicatedRequirementsKHR;

typedef struct VkMemoryDedicatedAllocateInfoKHR {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
    VkBuffer           buffer;
} VkMemoryDedicatedAllocateInfoKHR;



#define VK_KHR_storage_buffer_storage_class 1
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION 1
#define VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME "VK_KHR_storage_buffer_storage_class"


#define VK_KHR_relaxed_block_layout 1
#define VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION 1
#define VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME "VK_KHR_relaxed_block_layout"


#define VK_KHR_get_memory_requirements2 1
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION 1
#define VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME "VK_KHR_get_memory_requirements2"

typedef struct VkBufferMemoryRequirementsInfo2KHR {
    VkStructureType    sType;
    const void*        pNext;
    VkBuffer           buffer;
} VkBufferMemoryRequirementsInfo2KHR;

typedef struct VkImageMemoryRequirementsInfo2KHR {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
} VkImageMemoryRequirementsInfo2KHR;

typedef struct VkImageSparseMemoryRequirementsInfo2KHR {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
} VkImageSparseMemoryRequirementsInfo2KHR;

typedef struct VkMemoryRequirements2KHR {
    VkStructureType         sType;
    void*                   pNext;
    VkMemoryRequirements    memoryRequirements;
} VkMemoryRequirements2KHR;

typedef struct VkSparseImageMemoryRequirements2KHR {
    VkStructureType                    sType;
    void*                              pNext;
    VkSparseImageMemoryRequirements    memoryRequirements;
} VkSparseImageMemoryRequirements2KHR;


typedef void (VKAPI_PTR *PFN_vkGetImageMemoryRequirements2KHR)(VkDevice device, const VkImageMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetBufferMemoryRequirements2KHR)(VkDevice device, const VkBufferMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements);
typedef void (VKAPI_PTR *PFN_vkGetImageSparseMemoryRequirements2KHR)(VkDevice device, const VkImageSparseMemoryRequirementsInfo2KHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements);


#define VK_EXT_debug_report 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkDebugReportCallbackEXT)

#define VK_EXT_DEBUG_REPORT_SPEC_VERSION  8
#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME "VK_EXT_debug_report"
#define VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
#define VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT


typedef enum class VkDebugReportObjectTypeEXT {
    e_UNKNOWN_EXT = 0,
    e_INSTANCE_EXT = 1,
    e_PHYSICAL_DEVICE_EXT = 2,
    e_DEVICE_EXT = 3,
    e_QUEUE_EXT = 4,
    e_SEMAPHORE_EXT = 5,
    e_COMMAND_BUFFER_EXT = 6,
    e_FENCE_EXT = 7,
    e_DEVICE_MEMORY_EXT = 8,
    e_BUFFER_EXT = 9,
    e_IMAGE_EXT = 10,
    e_EVENT_EXT = 11,
    e_QUERY_POOL_EXT = 12,
    e_BUFFER_VIEW_EXT = 13,
    e_IMAGE_VIEW_EXT = 14,
    e_SHADER_MODULE_EXT = 15,
    e_PIPELINE_CACHE_EXT = 16,
    e_PIPELINE_LAYOUT_EXT = 17,
    e_RENDER_PASS_EXT = 18,
    e_PIPELINE_EXT = 19,
    e_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    e_SAMPLER_EXT = 21,
    e_DESCRIPTOR_POOL_EXT = 22,
    e_DESCRIPTOR_SET_EXT = 23,
    e_FRAMEBUFFER_EXT = 24,
    e_COMMAND_POOL_EXT = 25,
    e_SURFACE_KHR_EXT = 26,
    e_SWAPCHAIN_KHR_EXT = 27,
    e_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    e_DISPLAY_KHR_EXT = 29,
    e_DISPLAY_MODE_KHR_EXT = 30,
    e_OBJECT_TABLE_NVX_EXT = 31,
    e_INDIRECT_COMMANDS_LAYOUT_NVX_EXT = 32,
    e_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000,
    e_BEGIN_RANGE_EXT = e_UNKNOWN_EXT,
    e_END_RANGE_EXT = e_INDIRECT_COMMANDS_LAYOUT_NVX_EXT,
    e_RANGE_SIZE_EXT = (e_INDIRECT_COMMANDS_LAYOUT_NVX_EXT - e_UNKNOWN_EXT + 1),
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugReportObjectTypeEXT;


typedef enum class VkDebugReportFlagsEXT {
    e_INFORMATION_BIT_EXT = 0x00000001,
    e_WARNING_BIT_EXT = 0x00000002,
    e_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
    e_ERROR_BIT_EXT = 0x00000008,
    e_DEBUG_BIT_EXT = 0x00000010,
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDebugReportFlagsEXT;
DEFINE_ENUM_BITWISE_OPERATORS(VkDebugReportFlagsEXT)

typedef VkBool32 (VKAPI_PTR *PFN_vkDebugReportCallbackEXT)(
    VkDebugReportFlagsEXT                       flags,
    VkDebugReportObjectTypeEXT                  objectType,
    uint64_t                                    object,
    size_t                                      location,
    int32_t                                     messageCode,
    const char*                                 pLayerPrefix,
    const char*                                 pMessage,
    void*                                       pUserData);

typedef struct VkDebugReportCallbackCreateInfoEXT {
    VkStructureType                 sType;
    const void*                     pNext;
    VkDebugReportFlagsEXT           flags;
    PFN_vkDebugReportCallbackEXT    pfnCallback;
    void*                           pUserData;
} VkDebugReportCallbackCreateInfoEXT;


typedef VkResult (VKAPI_PTR *PFN_vkCreateDebugReportCallbackEXT)(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback);
typedef void (VKAPI_PTR *PFN_vkDestroyDebugReportCallbackEXT)(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator);
typedef void (VKAPI_PTR *PFN_vkDebugReportMessageEXT)(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage);


#define VK_NV_glsl_shader 1
#define VK_NV_GLSL_SHADER_SPEC_VERSION    1
#define VK_NV_GLSL_SHADER_EXTENSION_NAME  "VK_NV_glsl_shader"


#define VK_EXT_depth_range_unrestricted 1
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION 1
#define VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME "VK_EXT_depth_range_unrestricted"


#define VK_IMG_filter_cubic 1
#define VK_IMG_FILTER_CUBIC_SPEC_VERSION  1
#define VK_IMG_FILTER_CUBIC_EXTENSION_NAME "VK_IMG_filter_cubic"


#define VK_AMD_rasterization_order 1
#define VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION 1
#define VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME "VK_AMD_rasterization_order"


typedef enum class VkRasterizationOrderAMD {
    e_STRICT_AMD = 0,
    e_RELAXED_AMD = 1,
    e_BEGIN_RANGE_AMD = e_STRICT_AMD,
    e_END_RANGE_AMD = e_RELAXED_AMD,
    e_RANGE_SIZE_AMD = (e_RELAXED_AMD - e_STRICT_AMD + 1),
    e_MAX_ENUM_AMD = 0x7FFFFFFF
} VkRasterizationOrderAMD;

typedef struct VkPipelineRasterizationStateRasterizationOrderAMD {
    VkStructureType            sType;
    const void*                pNext;
    VkRasterizationOrderAMD    rasterizationOrder;
} VkPipelineRasterizationStateRasterizationOrderAMD;



#define VK_AMD_shader_trinary_minmax 1
#define VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION 1
#define VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME "VK_AMD_shader_trinary_minmax"


#define VK_AMD_shader_explicit_vertex_parameter 1
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION 1
#define VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME "VK_AMD_shader_explicit_vertex_parameter"


#define VK_EXT_debug_marker 1
#define VK_EXT_DEBUG_MARKER_SPEC_VERSION  4
#define VK_EXT_DEBUG_MARKER_EXTENSION_NAME "VK_EXT_debug_marker"

typedef struct VkDebugMarkerObjectNameInfoEXT {
    VkStructureType               sType;
    const void*                   pNext;
    VkDebugReportObjectTypeEXT    objectType;
    uint64_t                      object;
    const char*                   pObjectName;
} VkDebugMarkerObjectNameInfoEXT;

typedef struct VkDebugMarkerObjectTagInfoEXT {
    VkStructureType               sType;
    const void*                   pNext;
    VkDebugReportObjectTypeEXT    objectType;
    uint64_t                      object;
    uint64_t                      tagName;
    size_t                        tagSize;
    const void*                   pTag;
} VkDebugMarkerObjectTagInfoEXT;

typedef struct VkDebugMarkerMarkerInfoEXT {
    VkStructureType    sType;
    const void*        pNext;
    const char*        pMarkerName;
    float              color[4];
} VkDebugMarkerMarkerInfoEXT;


typedef VkResult (VKAPI_PTR *PFN_vkDebugMarkerSetObjectTagEXT)(VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo);
typedef VkResult (VKAPI_PTR *PFN_vkDebugMarkerSetObjectNameEXT)(VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo);
typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerBeginEXT)(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo);
typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerEndEXT)(VkCommandBuffer commandBuffer);
typedef void (VKAPI_PTR *PFN_vkCmdDebugMarkerInsertEXT)(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo);


#define VK_AMD_gcn_shader 1
#define VK_AMD_GCN_SHADER_SPEC_VERSION    1
#define VK_AMD_GCN_SHADER_EXTENSION_NAME  "VK_AMD_gcn_shader"


#define VK_NV_dedicated_allocation 1
#define VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION 1
#define VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME "VK_NV_dedicated_allocation"

typedef struct VkDedicatedAllocationImageCreateInfoNV {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           dedicatedAllocation;
} VkDedicatedAllocationImageCreateInfoNV;

typedef struct VkDedicatedAllocationBufferCreateInfoNV {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           dedicatedAllocation;
} VkDedicatedAllocationBufferCreateInfoNV;

typedef struct VkDedicatedAllocationMemoryAllocateInfoNV {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
    VkBuffer           buffer;
} VkDedicatedAllocationMemoryAllocateInfoNV;



#define VK_AMD_draw_indirect_count 1
#define VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION 1
#define VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME "VK_AMD_draw_indirect_count"

typedef void (VKAPI_PTR *PFN_vkCmdDrawIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);
typedef void (VKAPI_PTR *PFN_vkCmdDrawIndexedIndirectCountAMD)(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride);


#define VK_AMD_negative_viewport_height 1
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION 1
#define VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME "VK_AMD_negative_viewport_height"


#define VK_AMD_gpu_shader_half_float 1
#define VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION 1
#define VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME "VK_AMD_gpu_shader_half_float"


#define VK_AMD_shader_ballot 1
#define VK_AMD_SHADER_BALLOT_SPEC_VERSION 1
#define VK_AMD_SHADER_BALLOT_EXTENSION_NAME "VK_AMD_shader_ballot"


#define VK_AMD_texture_gather_bias_lod 1
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION 1
#define VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME "VK_AMD_texture_gather_bias_lod"

typedef struct VkTextureLODGatherFormatPropertiesAMD {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           supportsTextureGatherLODBiasAMD;
} VkTextureLODGatherFormatPropertiesAMD;



#define VK_KHX_multiview 1
#define VK_KHX_MULTIVIEW_SPEC_VERSION     1
#define VK_KHX_MULTIVIEW_EXTENSION_NAME   "VK_KHX_multiview"

typedef struct VkRenderPassMultiviewCreateInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           subpassCount;
    const uint32_t*    pViewMasks;
    uint32_t           dependencyCount;
    const int32_t*     pViewOffsets;
    uint32_t           correlationMaskCount;
    const uint32_t*    pCorrelationMasks;
} VkRenderPassMultiviewCreateInfoKHX;

typedef struct VkPhysicalDeviceMultiviewFeaturesKHX {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           multiview;
    VkBool32           multiviewGeometryShader;
    VkBool32           multiviewTessellationShader;
} VkPhysicalDeviceMultiviewFeaturesKHX;

typedef struct VkPhysicalDeviceMultiviewPropertiesKHX {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxMultiviewViewCount;
    uint32_t           maxMultiviewInstanceIndex;
} VkPhysicalDeviceMultiviewPropertiesKHX;



#define VK_IMG_format_pvrtc 1
#define VK_IMG_FORMAT_PVRTC_SPEC_VERSION  1
#define VK_IMG_FORMAT_PVRTC_EXTENSION_NAME "VK_IMG_format_pvrtc"


#define VK_NV_external_memory_capabilities 1
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME "VK_NV_external_memory_capabilities"


typedef enum class VkExternalMemoryHandleTypeFlagsNV {
    e_OPAQUE_WIN32_BIT_NV = 0x00000001,
    e_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002,
    e_D3D11_IMAGE_BIT_NV = 0x00000004,
    e_D3D11_IMAGE_KMT_BIT_NV = 0x00000008,
    e_MAX_ENUM_NV = 0x7FFFFFFF
} VkExternalMemoryHandleTypeFlagsNV;
DEFINE_ENUM_BITWISE_OPERATORS(VkExternalMemoryHandleTypeFlagsNV)

typedef enum class VkExternalMemoryFeatureFlagsNV {
    e_DEDICATED_ONLY_BIT_NV = 0x00000001,
    e_EXPORTABLE_BIT_NV = 0x00000002,
    e_IMPORTABLE_BIT_NV = 0x00000004,
    e_MAX_ENUM_NV = 0x7FFFFFFF
} VkExternalMemoryFeatureFlagsNV;
DEFINE_ENUM_BITWISE_OPERATORS(VkExternalMemoryFeatureFlagsNV)

typedef struct VkExternalImageFormatPropertiesNV {
    VkImageFormatProperties              imageFormatProperties;
    VkExternalMemoryFeatureFlagsNV       externalMemoryFeatures;
    VkExternalMemoryHandleTypeFlagsNV    exportFromImportedHandleTypes;
    VkExternalMemoryHandleTypeFlagsNV    compatibleHandleTypes;
} VkExternalImageFormatPropertiesNV;


typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);


#define VK_NV_external_memory 1
#define VK_NV_EXTERNAL_MEMORY_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME "VK_NV_external_memory"

typedef struct VkExternalMemoryImageCreateInfoNV {
    VkStructureType                      sType;
    const void*                          pNext;
    VkExternalMemoryHandleTypeFlagsNV    handleTypes;
} VkExternalMemoryImageCreateInfoNV;

typedef struct VkExportMemoryAllocateInfoNV {
    VkStructureType                      sType;
    const void*                          pNext;
    VkExternalMemoryHandleTypeFlagsNV    handleTypes;
} VkExportMemoryAllocateInfoNV;



#ifdef VK_USE_PLATFORM_WIN32_KHR
#define VK_NV_external_memory_win32 1
#define VK_NV_EXTERNAL_MEMORY_WIN32_SPEC_VERSION 1
#define VK_NV_EXTERNAL_MEMORY_WIN32_EXTENSION_NAME "VK_NV_external_memory_win32"

typedef struct VkImportMemoryWin32HandleInfoNV {
    VkStructureType                      sType;
    const void*                          pNext;
    VkExternalMemoryHandleTypeFlagsNV    handleType;
    HANDLE                               handle;
} VkImportMemoryWin32HandleInfoNV;

typedef struct VkExportMemoryWin32HandleInfoNV {
    VkStructureType               sType;
    const void*                   pNext;
    const SECURITY_ATTRIBUTES*    pAttributes;
    DWORD                         dwAccess;
} VkExportMemoryWin32HandleInfoNV;


typedef VkResult (VKAPI_PTR *PFN_vkGetMemoryWin32HandleNV)(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle);

#endif /* VK_USE_PLATFORM_WIN32_KHR */

#ifdef VK_USE_PLATFORM_WIN32_KHR
#define VK_NV_win32_keyed_mutex 1
#define VK_NV_WIN32_KEYED_MUTEX_SPEC_VERSION 1
#define VK_NV_WIN32_KEYED_MUTEX_EXTENSION_NAME "VK_NV_win32_keyed_mutex"

typedef struct VkWin32KeyedMutexAcquireReleaseInfoNV {
    VkStructureType          sType;
    const void*              pNext;
    uint32_t                 acquireCount;
    const VkDeviceMemory*    pAcquireSyncs;
    const uint64_t*          pAcquireKeys;
    const uint32_t*          pAcquireTimeoutMilliseconds;
    uint32_t                 releaseCount;
    const VkDeviceMemory*    pReleaseSyncs;
    const uint64_t*          pReleaseKeys;
} VkWin32KeyedMutexAcquireReleaseInfoNV;


#endif /* VK_USE_PLATFORM_WIN32_KHR */

#define VK_KHX_device_group 1
#define VK_MAX_DEVICE_GROUP_SIZE_KHX      32
#define VK_KHX_DEVICE_GROUP_SPEC_VERSION  1
#define VK_KHX_DEVICE_GROUP_EXTENSION_NAME "VK_KHX_device_group"


typedef enum class VkPeerMemoryFeatureFlagsKHX {
    e_COPY_SRC_BIT_KHX = 0x00000001,
    e_COPY_DST_BIT_KHX = 0x00000002,
    e_GENERIC_SRC_BIT_KHX = 0x00000004,
    e_GENERIC_DST_BIT_KHX = 0x00000008,
    e_MAX_ENUM_KHX = 0x7FFFFFFF
} VkPeerMemoryFeatureFlagsKHX;
DEFINE_ENUM_BITWISE_OPERATORS(VkPeerMemoryFeatureFlagsKHX)

typedef enum class VkMemoryAllocateFlagsKHX {
    e_DEVICE_MASK_BIT_KHX = 0x00000001,
    e_MAX_ENUM_KHX = 0x7FFFFFFF
} VkMemoryAllocateFlagsKHX;
DEFINE_ENUM_BITWISE_OPERATORS(VkMemoryAllocateFlagsKHX)

typedef enum class VkDeviceGroupPresentModeFlagsKHX {
    e_LOCAL_BIT_KHX = 0x00000001,
    e_REMOTE_BIT_KHX = 0x00000002,
    e_SUM_BIT_KHX = 0x00000004,
    e_LOCAL_MULTI_DEVICE_BIT_KHX = 0x00000008,
    e_MAX_ENUM_KHX = 0x7FFFFFFF
} VkDeviceGroupPresentModeFlagsKHX;
DEFINE_ENUM_BITWISE_OPERATORS(VkDeviceGroupPresentModeFlagsKHX)

typedef struct VkMemoryAllocateFlagsInfoKHX {
    VkStructureType             sType;
    const void*                 pNext;
    VkMemoryAllocateFlagsKHX    flags;
    uint32_t                    deviceMask;
} VkMemoryAllocateFlagsInfoKHX;

typedef struct VkBindBufferMemoryInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    VkBuffer           buffer;
    VkDeviceMemory     memory;
    VkDeviceSize       memoryOffset;
    uint32_t           deviceIndexCount;
    const uint32_t*    pDeviceIndices;
} VkBindBufferMemoryInfoKHX;

typedef struct VkBindImageMemoryInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    VkImage            image;
    VkDeviceMemory     memory;
    VkDeviceSize       memoryOffset;
    uint32_t           deviceIndexCount;
    const uint32_t*    pDeviceIndices;
    uint32_t           SFRRectCount;
    const VkRect2D*    pSFRRects;
} VkBindImageMemoryInfoKHX;

typedef struct VkDeviceGroupRenderPassBeginInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           deviceMask;
    uint32_t           deviceRenderAreaCount;
    const VkRect2D*    pDeviceRenderAreas;
} VkDeviceGroupRenderPassBeginInfoKHX;

typedef struct VkDeviceGroupCommandBufferBeginInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           deviceMask;
} VkDeviceGroupCommandBufferBeginInfoKHX;

typedef struct VkDeviceGroupSubmitInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           waitSemaphoreCount;
    const uint32_t*    pWaitSemaphoreDeviceIndices;
    uint32_t           commandBufferCount;
    const uint32_t*    pCommandBufferDeviceMasks;
    uint32_t           signalSemaphoreCount;
    const uint32_t*    pSignalSemaphoreDeviceIndices;
} VkDeviceGroupSubmitInfoKHX;

typedef struct VkDeviceGroupBindSparseInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           resourceDeviceIndex;
    uint32_t           memoryDeviceIndex;
} VkDeviceGroupBindSparseInfoKHX;

typedef struct VkDeviceGroupPresentCapabilitiesKHX {
    VkStructureType                     sType;
    const void*                         pNext;
    uint32_t                            presentMask[VK_MAX_DEVICE_GROUP_SIZE_KHX];
    VkDeviceGroupPresentModeFlagsKHX    modes;
} VkDeviceGroupPresentCapabilitiesKHX;

typedef struct VkImageSwapchainCreateInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    VkSwapchainKHR     swapchain;
} VkImageSwapchainCreateInfoKHX;

typedef struct VkBindImageMemorySwapchainInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    VkSwapchainKHR     swapchain;
    uint32_t           imageIndex;
} VkBindImageMemorySwapchainInfoKHX;

typedef struct VkAcquireNextImageInfoKHX {
    VkStructureType    sType;
    const void*        pNext;
    VkSwapchainKHR     swapchain;
    uint64_t           timeout;
    VkSemaphore        semaphore;
    VkFence            fence;
    uint32_t           deviceMask;
} VkAcquireNextImageInfoKHX;

typedef struct VkDeviceGroupPresentInfoKHX {
    VkStructureType                        sType;
    const void*                            pNext;
    uint32_t                               swapchainCount;
    const uint32_t*                        pDeviceMasks;
    VkDeviceGroupPresentModeFlagsKHX    mode;
} VkDeviceGroupPresentInfoKHX;

typedef struct VkDeviceGroupSwapchainCreateInfoKHX {
    VkStructureType                     sType;
    const void*                         pNext;
    VkDeviceGroupPresentModeFlagsKHX    modes;
} VkDeviceGroupSwapchainCreateInfoKHX;


typedef void (VKAPI_PTR *PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX)(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlagsKHX* pPeerMemoryFeatures);
typedef VkResult (VKAPI_PTR *PFN_vkBindBufferMemory2KHX)(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfoKHX* pBindInfos);
typedef VkResult (VKAPI_PTR *PFN_vkBindImageMemory2KHX)(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfoKHX* pBindInfos);
typedef void (VKAPI_PTR *PFN_vkCmdSetDeviceMaskKHX)(VkCommandBuffer commandBuffer, uint32_t deviceMask);
typedef VkResult (VKAPI_PTR *PFN_vkGetDeviceGroupPresentCapabilitiesKHX)(VkDevice device, VkDeviceGroupPresentCapabilitiesKHX* pDeviceGroupPresentCapabilities);
typedef VkResult (VKAPI_PTR *PFN_vkGetDeviceGroupSurfacePresentModesKHX)(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHX* pModes);
typedef VkResult (VKAPI_PTR *PFN_vkAcquireNextImage2KHX)(VkDevice device, const VkAcquireNextImageInfoKHX* pAcquireInfo, uint32_t* pImageIndex);
typedef void (VKAPI_PTR *PFN_vkCmdDispatchBaseKHX)(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDevicePresentRectanglesKHX)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects);


#define VK_EXT_validation_flags 1
#define VK_EXT_VALIDATION_FLAGS_SPEC_VERSION 1
#define VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME "VK_EXT_validation_flags"


typedef enum class VkValidationCheckEXT {
    e_ALL_EXT = 0,
    e_SHADERS_EXT = 1,
    e_BEGIN_RANGE_EXT = e_ALL_EXT,
    e_END_RANGE_EXT = e_SHADERS_EXT,
    e_RANGE_SIZE_EXT = (e_SHADERS_EXT - e_ALL_EXT + 1),
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkValidationCheckEXT;

typedef struct VkValidationFlagsEXT {
    VkStructureType          sType;
    const void*              pNext;
    uint32_t                 disabledValidationCheckCount;
    VkValidationCheckEXT*    pDisabledValidationChecks;
} VkValidationFlagsEXT;



#ifdef VK_USE_PLATFORM_VI_NN
#define VK_NN_vi_surface 1
#define VK_NN_VI_SURFACE_SPEC_VERSION     1
#define VK_NN_VI_SURFACE_EXTENSION_NAME   "VK_NN_vi_surface"

typedef VkFlags VkViSurfaceCreateFlagsNN;

typedef struct VkViSurfaceCreateInfoNN {
    VkStructureType             sType;
    const void*                 pNext;
    VkViSurfaceCreateFlagsNN    flags;
    void*                       window;
} VkViSurfaceCreateInfoNN;


typedef VkResult (VKAPI_PTR *PFN_vkCreateViSurfaceNN)(VkInstance instance, const VkViSurfaceCreateInfoNN* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);

#endif /* VK_USE_PLATFORM_VI_NN */

#define VK_EXT_shader_subgroup_ballot 1
#define VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION 1
#define VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME "VK_EXT_shader_subgroup_ballot"


#define VK_EXT_shader_subgroup_vote 1
#define VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION 1
#define VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME "VK_EXT_shader_subgroup_vote"


#define VK_KHX_device_group_creation 1
#define VK_KHX_DEVICE_GROUP_CREATION_SPEC_VERSION 1
#define VK_KHX_DEVICE_GROUP_CREATION_EXTENSION_NAME "VK_KHX_device_group_creation"

typedef struct VkPhysicalDeviceGroupPropertiesKHX {
    VkStructureType     sType;
    void*               pNext;
    uint32_t            physicalDeviceCount;
    VkPhysicalDevice    physicalDevices[VK_MAX_DEVICE_GROUP_SIZE_KHX];
    VkBool32            subsetAllocation;
} VkPhysicalDeviceGroupPropertiesKHX;

typedef struct VkDeviceGroupDeviceCreateInfoKHX {
    VkStructureType            sType;
    const void*                pNext;
    uint32_t                   physicalDeviceCount;
    const VkPhysicalDevice*    pPhysicalDevices;
} VkDeviceGroupDeviceCreateInfoKHX;


typedef VkResult (VKAPI_PTR *PFN_vkEnumeratePhysicalDeviceGroupsKHX)(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupPropertiesKHX* pPhysicalDeviceGroupProperties);


#define VK_NVX_device_generated_commands 1
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkObjectTableNVX)
VK_DEFINE_NON_DISPATCHABLE_HANDLE(VkIndirectCommandsLayoutNVX)

#define VK_NVX_DEVICE_GENERATED_COMMANDS_SPEC_VERSION 3
#define VK_NVX_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME "VK_NVX_device_generated_commands"


typedef enum class VkIndirectCommandsTokenTypeNVX {
    e_PIPELINE_NVX = 0,
    e_DESCRIPTOR_SET_NVX = 1,
    e_INDEX_BUFFER_NVX = 2,
    e_VERTEX_BUFFER_NVX = 3,
    e_PUSH_CONSTANT_NVX = 4,
    e_DRAW_INDEXED_NVX = 5,
    e_DRAW_NVX = 6,
    e_DISPATCH_NVX = 7,
    e_BEGIN_RANGE_NVX = e_PIPELINE_NVX,
    e_END_RANGE_NVX = e_DISPATCH_NVX,
    e_RANGE_SIZE_NVX = (e_DISPATCH_NVX - e_PIPELINE_NVX + 1),
    e_MAX_ENUM_NVX = 0x7FFFFFFF
} VkIndirectCommandsTokenTypeNVX;

typedef enum class VkObjectEntryTypeNVX {
    e_DESCRIPTOR_SET_NVX = 0,
    e_PIPELINE_NVX = 1,
    e_INDEX_BUFFER_NVX = 2,
    e_VERTEX_BUFFER_NVX = 3,
    e_PUSH_CONSTANT_NVX = 4,
    e_BEGIN_RANGE_NVX = e_DESCRIPTOR_SET_NVX,
    e_END_RANGE_NVX = e_PUSH_CONSTANT_NVX,
    e_RANGE_SIZE_NVX = (e_PUSH_CONSTANT_NVX - e_DESCRIPTOR_SET_NVX + 1),
    e_MAX_ENUM_NVX = 0x7FFFFFFF
} VkObjectEntryTypeNVX;


typedef enum class VkIndirectCommandsLayoutUsageFlagsNVX {
    e_UNORDERED_SEQUENCES_BIT_NVX = 0x00000001,
    e_SPARSE_SEQUENCES_BIT_NVX = 0x00000002,
    e_EMPTY_EXECUTIONS_BIT_NVX = 0x00000004,
    e_INDEXED_SEQUENCES_BIT_NVX = 0x00000008,
    e_MAX_ENUM_NVX = 0x7FFFFFFF
} VkIndirectCommandsLayoutUsageFlagsNVX;
DEFINE_ENUM_BITWISE_OPERATORS(VkIndirectCommandsLayoutUsageFlagsNVX)

typedef enum class VkObjectEntryUsageFlagsNVX {
    e_GRAPHICS_BIT_NVX = 0x00000001,
    e_COMPUTE_BIT_NVX = 0x00000002,
    e_MAX_ENUM_NVX = 0x7FFFFFFF
} VkObjectEntryUsageFlagsNVX;
DEFINE_ENUM_BITWISE_OPERATORS(VkObjectEntryUsageFlagsNVX)

typedef struct VkDeviceGeneratedCommandsFeaturesNVX {
    VkStructureType    sType;
    const void*        pNext;
    VkBool32           computeBindingPointSupport;
} VkDeviceGeneratedCommandsFeaturesNVX;

typedef struct VkDeviceGeneratedCommandsLimitsNVX {
    VkStructureType    sType;
    const void*        pNext;
    uint32_t           maxIndirectCommandsLayoutTokenCount;
    uint32_t           maxObjectEntryCounts;
    uint32_t           minSequenceCountBufferOffsetAlignment;
    uint32_t           minSequenceIndexBufferOffsetAlignment;
    uint32_t           minCommandsTokenBufferOffsetAlignment;
} VkDeviceGeneratedCommandsLimitsNVX;

typedef struct VkIndirectCommandsTokenNVX {
    VkIndirectCommandsTokenTypeNVX    tokenType;
    VkBuffer                          buffer;
    VkDeviceSize                      offset;
} VkIndirectCommandsTokenNVX;

typedef struct VkIndirectCommandsLayoutTokenNVX {
    VkIndirectCommandsTokenTypeNVX    tokenType;
    uint32_t                          bindingUnit;
    uint32_t                          dynamicCount;
    uint32_t                          divisor;
} VkIndirectCommandsLayoutTokenNVX;

typedef struct VkIndirectCommandsLayoutCreateInfoNVX {
    VkStructureType                            sType;
    const void*                                pNext;
    VkPipelineBindPoint                        pipelineBindPoint;
    VkIndirectCommandsLayoutUsageFlagsNVX      flags;
    uint32_t                                   tokenCount;
    const VkIndirectCommandsLayoutTokenNVX*    pTokens;
} VkIndirectCommandsLayoutCreateInfoNVX;

typedef struct VkCmdProcessCommandsInfoNVX {
    VkStructureType                      sType;
    const void*                          pNext;
    VkObjectTableNVX                     objectTable;
    VkIndirectCommandsLayoutNVX          indirectCommandsLayout;
    uint32_t                             indirectCommandsTokenCount;
    const VkIndirectCommandsTokenNVX*    pIndirectCommandsTokens;
    uint32_t                             maxSequencesCount;
    VkCommandBuffer                      targetCommandBuffer;
    VkBuffer                             sequencesCountBuffer;
    VkDeviceSize                         sequencesCountOffset;
    VkBuffer                             sequencesIndexBuffer;
    VkDeviceSize                         sequencesIndexOffset;
} VkCmdProcessCommandsInfoNVX;

typedef struct VkCmdReserveSpaceForCommandsInfoNVX {
    VkStructureType                sType;
    const void*                    pNext;
    VkObjectTableNVX               objectTable;
    VkIndirectCommandsLayoutNVX    indirectCommandsLayout;
    uint32_t                       maxSequencesCount;
} VkCmdReserveSpaceForCommandsInfoNVX;

typedef struct VkObjectTableCreateInfoNVX {
    VkStructureType                      sType;
    const void*                          pNext;
    uint32_t                             objectCount;
    const VkObjectEntryTypeNVX*          pObjectEntryTypes;
    const uint32_t*                      pObjectEntryCounts;
    const VkObjectEntryUsageFlagsNVX*    pObjectEntryUsageFlags;
    uint32_t                             maxUniformBuffersPerDescriptor;
    uint32_t                             maxStorageBuffersPerDescriptor;
    uint32_t                             maxStorageImagesPerDescriptor;
    uint32_t                             maxSampledImagesPerDescriptor;
    uint32_t                             maxPipelineLayouts;
} VkObjectTableCreateInfoNVX;

typedef struct VkObjectTableEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
} VkObjectTableEntryNVX;

typedef struct VkObjectTablePipelineEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkPipeline                    pipeline;
} VkObjectTablePipelineEntryNVX;

typedef struct VkObjectTableDescriptorSetEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkPipelineLayout              pipelineLayout;
    VkDescriptorSet               descriptorSet;
} VkObjectTableDescriptorSetEntryNVX;

typedef struct VkObjectTableVertexBufferEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkBuffer                      buffer;
} VkObjectTableVertexBufferEntryNVX;

typedef struct VkObjectTableIndexBufferEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkBuffer                      buffer;
    VkIndexType                   indexType;
} VkObjectTableIndexBufferEntryNVX;

typedef struct VkObjectTablePushConstantEntryNVX {
    VkObjectEntryTypeNVX          type;
    VkObjectEntryUsageFlagsNVX    flags;
    VkPipelineLayout              pipelineLayout;
    VkShaderStageFlags            stageFlags;
} VkObjectTablePushConstantEntryNVX;


typedef void (VKAPI_PTR *PFN_vkCmdProcessCommandsNVX)(VkCommandBuffer commandBuffer, const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo);
typedef void (VKAPI_PTR *PFN_vkCmdReserveSpaceForCommandsNVX)(VkCommandBuffer commandBuffer, const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo);
typedef VkResult (VKAPI_PTR *PFN_vkCreateIndirectCommandsLayoutNVX)(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout);
typedef void (VKAPI_PTR *PFN_vkDestroyIndirectCommandsLayoutNVX)(VkDevice device, VkIndirectCommandsLayoutNVX indirectCommandsLayout, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkCreateObjectTableNVX)(VkDevice device, const VkObjectTableCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkObjectTableNVX* pObjectTable);
typedef void (VKAPI_PTR *PFN_vkDestroyObjectTableNVX)(VkDevice device, VkObjectTableNVX objectTable, const VkAllocationCallbacks* pAllocator);
typedef VkResult (VKAPI_PTR *PFN_vkRegisterObjectsNVX)(VkDevice device, VkObjectTableNVX objectTable, uint32_t objectCount, const VkObjectTableEntryNVX* const*    ppObjectTableEntries, const uint32_t* pObjectIndices);
typedef VkResult (VKAPI_PTR *PFN_vkUnregisterObjectsNVX)(VkDevice device, VkObjectTableNVX objectTable, uint32_t objectCount, const VkObjectEntryTypeNVX* pObjectEntryTypes, const uint32_t* pObjectIndices);
typedef void (VKAPI_PTR *PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX)(VkPhysicalDevice physicalDevice, VkDeviceGeneratedCommandsFeaturesNVX* pFeatures, VkDeviceGeneratedCommandsLimitsNVX* pLimits);


#define VK_NV_clip_space_w_scaling 1
#define VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION 1
#define VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME "VK_NV_clip_space_w_scaling"

typedef struct VkViewportWScalingNV {
    float    xcoeff;
    float    ycoeff;
} VkViewportWScalingNV;

typedef struct VkPipelineViewportWScalingStateCreateInfoNV {
    VkStructureType                sType;
    const void*                    pNext;
    VkBool32                       viewportWScalingEnable;
    uint32_t                       viewportCount;
    const VkViewportWScalingNV*    pViewportWScalings;
} VkPipelineViewportWScalingStateCreateInfoNV;


typedef void (VKAPI_PTR *PFN_vkCmdSetViewportWScalingNV)(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings);


#define VK_EXT_direct_mode_display 1
#define VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION 1
#define VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME "VK_EXT_direct_mode_display"

typedef VkResult (VKAPI_PTR *PFN_vkReleaseDisplayEXT)(VkPhysicalDevice physicalDevice, VkDisplayKHR display);


#ifdef VK_USE_PLATFORM_XLIB_XRANDR_EXT
#define VK_EXT_acquire_xlib_display 1
#include <X11/extensions/Xrandr.h>

#define VK_EXT_ACQUIRE_XLIB_DISPLAY_SPEC_VERSION 1
#define VK_EXT_ACQUIRE_XLIB_DISPLAY_EXTENSION_NAME "VK_EXT_acquire_xlib_display"

typedef VkResult (VKAPI_PTR *PFN_vkAcquireXlibDisplayEXT)(VkPhysicalDevice physicalDevice, Display* dpy, VkDisplayKHR display);
typedef VkResult (VKAPI_PTR *PFN_vkGetRandROutputDisplayEXT)(VkPhysicalDevice physicalDevice, Display* dpy, RROutput rrOutput, VkDisplayKHR* pDisplay);

#endif /* VK_USE_PLATFORM_XLIB_XRANDR_EXT */

#define VK_EXT_display_surface_counter 1
#define VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION 1
#define VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME "VK_EXT_display_surface_counter"


typedef enum class VkSurfaceCounterFlagsEXT {
    e_VBLANK_EXT = 0x00000001,
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkSurfaceCounterFlagsEXT;
DEFINE_ENUM_BITWISE_OPERATORS(VkSurfaceCounterFlagsEXT)

typedef struct VkSurfaceCapabilities2EXT {
    VkStructureType                  sType;
    void*                            pNext;
    uint32_t                         minImageCount;
    uint32_t                         maxImageCount;
    VkExtent2D                       currentExtent;
    VkExtent2D                       minImageExtent;
    VkExtent2D                       maxImageExtent;
    uint32_t                         maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR       supportedTransforms;
    VkSurfaceTransformFlagsKHR    currentTransform;
    VkCompositeAlphaFlagsKHR         supportedCompositeAlpha;
    VkImageUsageFlags                supportedUsageFlags;
    VkSurfaceCounterFlagsEXT         supportedSurfaceCounters;
} VkSurfaceCapabilities2EXT;


typedef VkResult (VKAPI_PTR *PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities);


#define VK_EXT_display_control 1
#define VK_EXT_DISPLAY_CONTROL_SPEC_VERSION 1
#define VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME "VK_EXT_display_control"


typedef enum class VkDisplayPowerStateEXT {
    e_OFF_EXT = 0,
    e_SUSPEND_EXT = 1,
    e_ON_EXT = 2,
    e_BEGIN_RANGE_EXT = e_OFF_EXT,
    e_END_RANGE_EXT = e_ON_EXT,
    e_RANGE_SIZE_EXT = (e_ON_EXT - e_OFF_EXT + 1),
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDisplayPowerStateEXT;

typedef enum class VkDeviceEventTypeEXT {
    e_DISPLAY_HOTPLUG_EXT = 0,
    e_BEGIN_RANGE_EXT = e_DISPLAY_HOTPLUG_EXT,
    e_END_RANGE_EXT = e_DISPLAY_HOTPLUG_EXT,
    e_RANGE_SIZE_EXT = (e_DISPLAY_HOTPLUG_EXT - e_DISPLAY_HOTPLUG_EXT + 1),
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDeviceEventTypeEXT;

typedef enum class VkDisplayEventTypeEXT {
    e_FIRST_PIXEL_OUT_EXT = 0,
    e_BEGIN_RANGE_EXT = e_FIRST_PIXEL_OUT_EXT,
    e_END_RANGE_EXT = e_FIRST_PIXEL_OUT_EXT,
    e_RANGE_SIZE_EXT = (e_FIRST_PIXEL_OUT_EXT - e_FIRST_PIXEL_OUT_EXT + 1),
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDisplayEventTypeEXT;

typedef struct VkDisplayPowerInfoEXT {
    VkStructureType           sType;
    const void*               pNext;
    VkDisplayPowerStateEXT    powerState;
} VkDisplayPowerInfoEXT;

typedef struct VkDeviceEventInfoEXT {
    VkStructureType         sType;
    const void*             pNext;
    VkDeviceEventTypeEXT    deviceEvent;
} VkDeviceEventInfoEXT;

typedef struct VkDisplayEventInfoEXT {
    VkStructureType          sType;
    const void*              pNext;
    VkDisplayEventTypeEXT    displayEvent;
} VkDisplayEventInfoEXT;

typedef struct VkSwapchainCounterCreateInfoEXT {
    VkStructureType             sType;
    const void*                 pNext;
    VkSurfaceCounterFlagsEXT    surfaceCounters;
} VkSwapchainCounterCreateInfoEXT;


typedef VkResult (VKAPI_PTR *PFN_vkDisplayPowerControlEXT)(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo);
typedef VkResult (VKAPI_PTR *PFN_vkRegisterDeviceEventEXT)(VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);
typedef VkResult (VKAPI_PTR *PFN_vkRegisterDisplayEventEXT)(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence);
typedef VkResult (VKAPI_PTR *PFN_vkGetSwapchainCounterEXT)(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagsEXT counter, uint64_t* pCounterValue);


#define VK_GOOGLE_display_timing 1
#define VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION 1
#define VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME "VK_GOOGLE_display_timing"

typedef struct VkRefreshCycleDurationGOOGLE {
    uint64_t    refreshDuration;
} VkRefreshCycleDurationGOOGLE;

typedef struct VkPastPresentationTimingGOOGLE {
    uint32_t    presentID;
    uint64_t    desiredPresentTime;
    uint64_t    actualPresentTime;
    uint64_t    earliestPresentTime;
    uint64_t    presentMargin;
} VkPastPresentationTimingGOOGLE;

typedef struct VkPresentTimeGOOGLE {
    uint32_t    presentID;
    uint64_t    desiredPresentTime;
} VkPresentTimeGOOGLE;

typedef struct VkPresentTimesInfoGOOGLE {
    VkStructureType               sType;
    const void*                   pNext;
    uint32_t                      swapchainCount;
    const VkPresentTimeGOOGLE*    pTimes;
} VkPresentTimesInfoGOOGLE;


typedef VkResult (VKAPI_PTR *PFN_vkGetRefreshCycleDurationGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);
typedef VkResult (VKAPI_PTR *PFN_vkGetPastPresentationTimingGOOGLE)(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings);


#define VK_NV_sample_mask_override_coverage 1
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION 1
#define VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME "VK_NV_sample_mask_override_coverage"


#define VK_NV_geometry_shader_passthrough 1
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION 1
#define VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME "VK_NV_geometry_shader_passthrough"


#define VK_NV_viewport_array2 1
#define VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION 1
#define VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME "VK_NV_viewport_array2"


#define VK_NVX_multiview_per_view_attributes 1
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION 1
#define VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME "VK_NVX_multiview_per_view_attributes"

typedef struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           perViewPositionAllComponents;
} VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;



#define VK_NV_viewport_swizzle 1
#define VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION 1
#define VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME "VK_NV_viewport_swizzle"


typedef enum class VkViewportCoordinateSwizzleNV {
    e_POSITIVE_X_NV = 0,
    e_NEGATIVE_X_NV = 1,
    e_POSITIVE_Y_NV = 2,
    e_NEGATIVE_Y_NV = 3,
    e_POSITIVE_Z_NV = 4,
    e_NEGATIVE_Z_NV = 5,
    e_POSITIVE_W_NV = 6,
    e_NEGATIVE_W_NV = 7,
    e_BEGIN_RANGE_NV = e_POSITIVE_X_NV,
    e_END_RANGE_NV = e_NEGATIVE_W_NV,
    e_RANGE_SIZE_NV = (e_NEGATIVE_W_NV - e_POSITIVE_X_NV + 1),
    e_MAX_ENUM_NV = 0x7FFFFFFF
} VkViewportCoordinateSwizzleNV;

typedef VkFlags VkPipelineViewportSwizzleStateCreateFlagsNV;

typedef struct VkViewportSwizzleNV {
    VkViewportCoordinateSwizzleNV    x;
    VkViewportCoordinateSwizzleNV    y;
    VkViewportCoordinateSwizzleNV    z;
    VkViewportCoordinateSwizzleNV    w;
} VkViewportSwizzleNV;

typedef struct VkPipelineViewportSwizzleStateCreateInfoNV {
    VkStructureType                                sType;
    const void*                                    pNext;
    VkPipelineViewportSwizzleStateCreateFlagsNV    flags;
    uint32_t                                       viewportCount;
    const VkViewportSwizzleNV*                     pViewportSwizzles;
} VkPipelineViewportSwizzleStateCreateInfoNV;



#define VK_EXT_discard_rectangles 1
#define VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION 1
#define VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME "VK_EXT_discard_rectangles"


typedef enum class VkDiscardRectangleModeEXT {
    e_INCLUSIVE_EXT = 0,
    e_EXCLUSIVE_EXT = 1,
    e_BEGIN_RANGE_EXT = e_INCLUSIVE_EXT,
    e_END_RANGE_EXT = e_EXCLUSIVE_EXT,
    e_RANGE_SIZE_EXT = (e_EXCLUSIVE_EXT - e_INCLUSIVE_EXT + 1),
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkDiscardRectangleModeEXT;

typedef VkFlags VkPipelineDiscardRectangleStateCreateFlagsEXT;

typedef struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           maxDiscardRectangles;
} VkPhysicalDeviceDiscardRectanglePropertiesEXT;

typedef struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    VkStructureType                                  sType;
    const void*                                      pNext;
    VkPipelineDiscardRectangleStateCreateFlagsEXT    flags;
    VkDiscardRectangleModeEXT                        discardRectangleMode;
    uint32_t                                         discardRectangleCount;
    const VkRect2D*                                  pDiscardRectangles;
} VkPipelineDiscardRectangleStateCreateInfoEXT;


typedef void (VKAPI_PTR *PFN_vkCmdSetDiscardRectangleEXT)(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles);


#define VK_EXT_swapchain_colorspace 1
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION 3
#define VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME "VK_EXT_swapchain_colorspace"


#define VK_EXT_hdr_metadata 1
#define VK_EXT_HDR_METADATA_SPEC_VERSION  1
#define VK_EXT_HDR_METADATA_EXTENSION_NAME "VK_EXT_hdr_metadata"

typedef struct VkXYColorEXT {
    float    x;
    float    y;
} VkXYColorEXT;

typedef struct VkHdrMetadataEXT {
    VkStructureType    sType;
    const void*        pNext;
    VkXYColorEXT       displayPrimaryRed;
    VkXYColorEXT       displayPrimaryGreen;
    VkXYColorEXT       displayPrimaryBlue;
    VkXYColorEXT       whitePoint;
    float              maxLuminance;
    float              minLuminance;
    float              maxContentLightLevel;
    float              maxFrameAverageLightLevel;
} VkHdrMetadataEXT;


typedef void (VKAPI_PTR *PFN_vkSetHdrMetadataEXT)(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata);


#ifdef VK_USE_PLATFORM_IOS_MVK
#define VK_MVK_ios_surface 1
#define VK_MVK_IOS_SURFACE_SPEC_VERSION   2
#define VK_MVK_IOS_SURFACE_EXTENSION_NAME "VK_MVK_ios_surface"

typedef VkFlags VkIOSSurfaceCreateFlagsMVK;

typedef struct VkIOSSurfaceCreateInfoMVK {
    VkStructureType               sType;
    const void*                   pNext;
    VkIOSSurfaceCreateFlagsMVK    flags;
    const void*                   pView;
} VkIOSSurfaceCreateInfoMVK;


typedef VkResult (VKAPI_PTR *PFN_vkCreateIOSSurfaceMVK)(VkInstance instance, const VkIOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);

#endif /* VK_USE_PLATFORM_IOS_MVK */

#ifdef VK_USE_PLATFORM_MACOS_MVK
#define VK_MVK_macos_surface 1
#define VK_MVK_MACOS_SURFACE_SPEC_VERSION 2
#define VK_MVK_MACOS_SURFACE_EXTENSION_NAME "VK_MVK_macos_surface"

typedef VkFlags VkMacOSSurfaceCreateFlagsMVK;

typedef struct VkMacOSSurfaceCreateInfoMVK {
    VkStructureType                 sType;
    const void*                     pNext;
    VkMacOSSurfaceCreateFlagsMVK    flags;
    const void*                     pView;
} VkMacOSSurfaceCreateInfoMVK;


typedef VkResult (VKAPI_PTR *PFN_vkCreateMacOSSurfaceMVK)(VkInstance instance, const VkMacOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface);

#endif /* VK_USE_PLATFORM_MACOS_MVK */

#define VK_EXT_sampler_filter_minmax 1
#define VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION 1
#define VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME "VK_EXT_sampler_filter_minmax"


typedef enum class VkSamplerReductionModeEXT {
    e_WEIGHTED_AVERAGE_EXT = 0,
    e_MIN_EXT = 1,
    e_MAX_EXT = 2,
    e_BEGIN_RANGE_EXT = e_WEIGHTED_AVERAGE_EXT,
    e_END_RANGE_EXT = e_MAX_EXT,
    e_RANGE_SIZE_EXT = (e_MAX_EXT - e_WEIGHTED_AVERAGE_EXT + 1),
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkSamplerReductionModeEXT;

typedef struct VkSamplerReductionModeCreateInfoEXT {
    VkStructureType              sType;
    const void*                  pNext;
    VkSamplerReductionModeEXT    reductionMode;
} VkSamplerReductionModeCreateInfoEXT;

typedef struct VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           filterMinmaxSingleComponentFormats;
    VkBool32           filterMinmaxImageComponentMapping;
} VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT;



#define VK_AMD_gpu_shader_int16 1
#define VK_AMD_GPU_SHADER_INT16_SPEC_VERSION 1
#define VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME "VK_AMD_gpu_shader_int16"


#define VK_AMD_mixed_attachment_samples 1
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION 1
#define VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME "VK_AMD_mixed_attachment_samples"


#define VK_EXT_blend_operation_advanced 1
#define VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION 2
#define VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME "VK_EXT_blend_operation_advanced"


typedef enum class VkBlendOverlapEXT {
    e_UNCORRELATED_EXT = 0,
    e_DISJOINT_EXT = 1,
    e_CONJOINT_EXT = 2,
    e_BEGIN_RANGE_EXT = e_UNCORRELATED_EXT,
    e_END_RANGE_EXT = e_CONJOINT_EXT,
    e_RANGE_SIZE_EXT = (e_CONJOINT_EXT - e_UNCORRELATED_EXT + 1),
    e_MAX_ENUM_EXT = 0x7FFFFFFF
} VkBlendOverlapEXT;

typedef struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    VkStructureType    sType;
    void*              pNext;
    VkBool32           advancedBlendCoherentOperations;
} VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;

typedef struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    VkStructureType    sType;
    void*              pNext;
    uint32_t           advancedBlendMaxColorAttachments;
    VkBool32           advancedBlendIndependentBlend;
    VkBool32           advancedBlendNonPremultipliedSrcColor;
    VkBool32           advancedBlendNonPremultipliedDstColor;
    VkBool32           advancedBlendCorrelatedOverlap;
    VkBool32           advancedBlendAllOperations;
} VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;

typedef struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    VkStructureType      sType;
    const void*          pNext;
    VkBool32             srcPremultiplied;
    VkBool32             dstPremultiplied;
    VkBlendOverlapEXT    blendOverlap;
} VkPipelineColorBlendAdvancedStateCreateInfoEXT;



#define VK_NV_fragment_coverage_to_color 1
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION 1
#define VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME "VK_NV_fragment_coverage_to_color"

typedef VkFlags VkPipelineCoverageToColorStateCreateFlagsNV;

typedef struct VkPipelineCoverageToColorStateCreateInfoNV {
    VkStructureType                                sType;
    const void*                                    pNext;
    VkPipelineCoverageToColorStateCreateFlagsNV    flags;
    VkBool32                                       coverageToColorEnable;
    uint32_t                                       coverageToColorLocation;
} VkPipelineCoverageToColorStateCreateInfoNV;



#define VK_NV_framebuffer_mixed_samples 1
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION 1
#define VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME "VK_NV_framebuffer_mixed_samples"


typedef enum class VkCoverageModulationModeNV {
    e_NONE_NV = 0,
    e_RGB_NV = 1,
    e_ALPHA_NV = 2,
    e_RGBA_NV = 3,
    e_BEGIN_RANGE_NV = e_NONE_NV,
    e_END_RANGE_NV = e_RGBA_NV,
    e_RANGE_SIZE_NV = (e_RGBA_NV - e_NONE_NV + 1),
    e_MAX_ENUM_NV = 0x7FFFFFFF
} VkCoverageModulationModeNV;

typedef VkFlags VkPipelineCoverageModulationStateCreateFlagsNV;

typedef struct VkPipelineCoverageModulationStateCreateInfoNV {
    VkStructureType                                   sType;
    const void*                                       pNext;
    VkPipelineCoverageModulationStateCreateFlagsNV    flags;
    VkCoverageModulationModeNV                        coverageModulationMode;
    VkBool32                                          coverageModulationTableEnable;
    uint32_t                                          coverageModulationTableCount;
    const float*                                      pCoverageModulationTable;
} VkPipelineCoverageModulationStateCreateInfoNV;



#define VK_NV_fill_rectangle 1
#define VK_NV_FILL_RECTANGLE_SPEC_VERSION 1
#define VK_NV_FILL_RECTANGLE_EXTENSION_NAME "VK_NV_fill_rectangle"


#define VK_EXT_post_depth_coverage 1
#define VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION 1
#define VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME "VK_EXT_post_depth_coverage"


#define VK_EXT_shader_viewport_index_layer 1
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION 1
#define VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME "VK_EXT_shader_viewport_index_layer"


#ifdef __cplusplus
}
#endif

#endif
#undef DEFINE_ENUM_BITWISE_OPERATORS